{
  "mainTitle": "用于Arduino的Brixel网络IDE",
  "blockModeBtn": "块编程",
  "textModeBtn": "文本编程",
  "compileBtn": "⚙️ 编译代码",
  "uploadBtn": "📤 上传到开发板",
  "blocklyHeaderTitle": "🧩 块编程编辑器",
  "codeTitle": "📄 实时 Arduino C++ 代码",
  "codeTitle_textMode": "📝 Arduino C++ 代码编辑器",
  "copyBtn": "📋 复制",
  "codePreview_initial": "// 在此处放置块以生成代码。",
  "sectionTitleLanguage": "🌍 语言和文件管理",
  "labelLanguage": "语言:",
  "langKo": "한국어",
  "langEn": "English",
  "langJa": "日本語",
  "langZh": "中文",
  "langEs": "Español",
  "languageStatus_official": "✓ 官方支持",
  "languageStatus_browser": "🌍 浏览器翻译",
  "labelFilename": "文件名:",
  "fileNameInput_placeholder": "arduino_project",
  "saveBtn": "💾 保存",
  "loadBtn": "📂 加载",
  "sectionTitleAgent": "🤖 输入PC代理代码",
  "agentIdInput_placeholder": "PC代理配对代码",
  "sectionTitleBoard": "🎯 选择开发板",
  "boardGroupArduino_label": "🔵 Arduino 系列",
  "boardUno": "Arduino Uno",
  "boardNano": "Arduino Nano",
  "boardMega": "Arduino Mega",
  "boardGroupEsp32_label": "🔴 ESP32 系列",
  "boardEsp32": "ESP32",
  "boardEsp32s2": "ESP32-S2",
  "boardEsp32c3": "ESP32-C3",
  "boardEsp32s3": "ESP32-S3",
  "boardGroupPico_label": "🟣 Raspberry Pi",
  "boardPico": "Raspberry Pi Pico",
  "boardPicow": "Raspberry Pi Pico W",
  "sectionTitlePort": "🔌 上传端口",
  "portAutoSelect": "请刷新端口。",
  "refreshPortsBtn_title": "刷新端口列表",
  "sectionTitleDownload": "⬇️ 下载代理",
  "agentOsWin": "适用于 Windows",
  "agentOsMac": "适用于 macOS",
  "agentOsLinux": "适用于 Linux",
  "downloadAgentBtn_title": "下载代理",
  "consoleHeader": "📺 实时日志",
  "loadingText": "系统初始化中...",
  "loadingText_en": "Initializing system...",
  "loadingText_ja": "システム初期化中...",
  "loadingText_zh": "系统初始化中...",
  "loadingText_es": "Inicializando sistema...",
  "js_alert_downloadAgent": "正在为 {osName} 下载 Arduino 代理。\n在实际部署中，将下载对应操作系统的安装程序。",
  "js_log_downloadRequest": "请求下载 {osName} 的代理",
  "js_log_modeSwitch": "切换模式: {modeName}",
  "js_log_modeBlock": "块编程",
  "js_log_modeText": "文本编程",
  "js_log_codeCopiedSuccess": "✅ 代码已复制到剪贴板。",
  "js_log_codeCopiedFail": "⚠ 复制代码失败。",
  "js_log_blockFileSaved": "✅ 块文件已保存: {fileName}",
  "js_log_blockFileSaveFail": "⚠ 保存块文件失败。",
  "js_log_sketchFileSaved": "✅ Sketch 文件已保存: {fileName}",
  "js_log_sketchFileSaveFail": "⚠ 保存 Sketch 文件失败。",
  "js_log_blockFileLoaded": "✅ 块文件已加载: {fileName}",
  "js_log_sketchFileLoaded": "✅ Sketch 文件已加载: {fileName}",
  "js_log_fileLoadFail": "⚠ 加载文件失败: {errorMsg}",
  "js_log_compileStart": "---",
  "js_log_compileStart_mode": "开始编译 ({modeName} 模式)",
  "js_log_noCodeToCompile": "⚠ 没有可编译的代码。",
  "js_log_compileComplete": "✅ 编译完成 - 大小: {size}",
  "js_log_compileFail": "⚠ 编译失败: {errorMsg}",
  "js_log_compileRequestFail": "⚠ 编译请求失败: {errorMsg}",
  "js_log_uploadPreCompile": "⚠ 请先编译代码。",
  "js_log_uploadNoAgentId": "⚠ 请输入代理 ID。",
  "js_log_uploadRequestSent": "📤 上传请求已发送...",
  "js_log_uploadRequestFail": "⚠ 上传请求失败: {errorMsg}",
  "js_log_requestingPorts": "🔍 正在从代理 ({agentId}) 请求端口列表...",
  "js_log_portListUpdated": "✅ 端口列表已更新。(找到 {portCount} 个端口)",
  "js_log_serverConnected": "🔗 已连接到服务器。",
  "js_log_serverError": "⚠ 服务器连接错误。",
  "js_log_langChanged": "语言已更改为 {lang}。",
  "js_log_langChangeFail": "更改语言失败: {errorMsg}",
  "js_log_initFail": "⚠ 系统初始化失败。",
  "template_arduino": "void setup() {\n  pinMode(13, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  digitalWrite(13, HIGH);\n  delay(500);\n  digitalWrite(13, LOW);\n  delay(500);\n}",
  "template_esp32": "void setup() {\n  pinMode(2, OUTPUT); // 内置 LED\n  Serial.begin(115200);\n  Serial.println(\"ESP32 start!\");\n}\n\nvoid loop() {\n  digitalWrite(2, HIGH);\n  delay(1000);\n  digitalWrite(2, LOW);\n  delay(1000);\n}",
  "template_pico": "void setup() {\n  pinMode(LED_BUILTIN, OUTPUT);\n  Serial.begin(115200);\n  Serial.println(\"Raspberry Pi Pico start!\");\n}\n\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(500);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(500);\n}",
  "ARDUINO_SETUP": "Arduino 设置",
  "ARDUINO_LOOP": "Arduino 循环",
  "ARDUINO_DIGITAL_WRITE": "数字写入 %1 引脚 %2",
  "ARDUINO_DIGITAL_READ": "数字读取 %1 引脚",
  "ARDUINO_ANALOG_WRITE": "模拟写入 %1 引脚 %2",
  "ARDUINO_ANALOG_READ": "模拟读取 %1 引脚",
  "ARDUINO_DELAY": "延迟 %1 毫秒",
  "ARDUINO_SERIAL_BEGIN": "启动串口，波特率 %1",
  "ARDUINO_SERIAL_PRINT": "通过串口打印 %1",
  "SENSOR_ULTRASONIC": "超声波传感器距离",
  "SENSOR_TEMPERATURE": "温度传感器值",
  "SENSOR_LIGHT": "光线传感器值",
  "SENSOR_BUTTON": "按钮 %1 引脚状态",
  "ACTUATOR_LED": "LED %1 引脚 %2",
  "ACTUATOR_SERVO": "舵机 %1 引脚旋转到 %2 度",
  "ACTUATOR_BUZZER": "蜂鸣器 %1 引脚发出 %2 的声音",
  "ACTUATOR_MOTOR": "电机 %1 引脚速度 %2",
  "PIN_HIGH": "高电平",
  "PIN_LOW": "低电平",
  "PIN_NUMBER": "引脚号",
  "PIN_VALUE": "值",
  "MILLISECONDS": "毫秒",
  "BKY_PAGE_TITLE": "MCU 块编程网络编辑器",
  "BKY_ARDUINO_REALTIME_CODE": "实时 Arduino C++ 代码",
  "BKY_COPY_BUTTON": "复制",
  "BKY_LANGUAGE_LABEL": "语言:",
  "BKY_SAVE_BUTTON": "保存",
  "BKY_LOAD_BUTTON": "加载",
  "BKY_FILE_NAME_PLACEHOLDER": "文件名",
  "BKY_ALERT_SAVE_FAILED": "块保存失败",
  "BKY_ALERT_LOAD_FAILED": "无效的块文件或文件已损坏",
  "BKY_CATEGORY_MAIN": "🎯 主要",
  "BKY_CATEGORY_PIN_CONTROL": "📌 引脚控制",
  "BKY_CATEGORY_CONTROL": "🔄 控制",
  "BKY_CATEGORY_LOGIC": "🔧 逻辑",
  "BKY_CATEGORY_MATH": "🔢 数学",
  "BKY_CATEGORY_TEXT": "📜 文本",
  "BKY_CATEGORY_COLOR": "🎨 颜色",
  "BKY_CATEGORY_VARIABLES": "📦 变量",
  "BKY_CATEGORY_FUNCTIONS": "⚡ 函数",
  "BKY_CATEGORY_DISPLAY_A": "💻 A.显示",
  "BKY_CATEGORY_DISPLAY_B": "🖥️ B.高级显示",
  "BKY_CATEGORY_SENSORS_A": "🌡️ A.通用传感器",
  "BKY_CATEGORY_SENSORS_B": "🛰️ B.高级传感器",
  "BKY_CATEGORY_MOTOR": "⚙️ 电机",
  "BKY_CATEGORY_OUTPUT": "💡 输出设备",
  "BKY_CATEGORY_COMM": "📶 通信",
  "BKY_CATEGORY_SERIAL": "📡 串口通信",
  "BKY_CATEGORY_UTIL": "🛠️ 实用工具",
  "BKY_CATEGORY_GUIDE": "📢 指南",
  "BKY_ARDUINO_STARTS_UP": "当 MCU 开发板启动时！",
  "BKY_ARDUINO_STARTS_UP_TOOLTIP": "在程序启动时包含必要的库。",
  "BKY_ARDUINO_SETUP": "🚀 设置_setup()",
  "BKY_ARDUINO_SETUP_TOOLTIP": "放置仅在 Arduino 首次启动时运行一次的代码。",
  "BKY_ARDUINO_LOOP": "♾️ 连续循环_loop()",
  "BKY_ARDUINO_LOOP_TOOLTIP": "放置在循环中连续运行的代码。",
  "BKY_PIN_MODE": "设置引脚 %1 为 %2",
  "BKY_INPUT": "输入(INPUT)",
  "BKY_OUTPUT": "输出(OUTPUT)",
  "BKY_PIN_MODE_TOOLTIP": "将引脚模式设置为输入或输出。",
  "BKY_READ_DIGITAL_PIN": "读取数字引脚 %1",
  "BKY_READ_DIGITAL_PIN_TOOLTIP": "读取数字引脚的状态（高/低电平）。",
  "BKY_SET_DIGITAL_PIN": "向数字引脚 %1 输出 %2",
  "BKY_HIGH": "高电平",
  "BKY_LOW": "低电平",
  "BKY_SET_DIGITAL_PIN_TOOLTIP": "向数字引脚输出高电平或低电平。",
  "BKY_READ_ANALOG_PIN": "读取模拟引脚 A%1",
  "BKY_READ_ANALOG_PIN_TOOLTIP": "读取模拟引脚的值（0-1023）。",
  "BKY_SET_PWM_PIN": "向 PWM 引脚 %1 输出 %2",
  "BKY_SET_PWM_PIN_TOOLTIP": "向 PWM 引脚输出 0-255 的值。",
  "BKY_SERVO_SETUP": "舵机引脚 %1 设置",
  "BKY_SERVO_SETUP_TOOLTIP": "为舵机使用设置引脚。",
  "BKY_SET_SERVO_ANGLE": "将舵机引脚 %1 的角度输出为 %2 度",
  "BKY_SET_SERVO_ANGLE_TOOLTIP": "将舵机角度设置为 0-180 度。此块自动包含舵机库。",
  "BKY_TONE_OUT": "从引脚 %1 播放 %2 赫兹的声音，持续 %3 毫秒",
  "BKY_TONE_OUT_TOOLTIP": "从指定引脚播放特定频率的声音。",
  "BKY_NO_TONE": "停止引脚 %1 的声音",
  "BKY_NO_TONE_TOOLTIP": "停止由 tone() 产生的声音。",
  "BKY_DELAY_MS": "等待 %1 秒",
  "BKY_DELAY_MS_TOOLTIP": "等待指定的时间（秒）。",
  "BKY_TIMER_MILLIS": "当前时间 (millis)",
  "BKY_TIMER_MILLIS_TOOLTIP": "返回自 Arduino 启动以来经过的时间，单位为 1/1000 秒。",
  "BKY_TIMER_RESET": "⏰ 重置定时器 %1",
  "BKY_TIMER_RESET_TOOLTIP": "重置指定编号的非阻塞定时器。",
  "BKY_TIMER_NON_BLOCKING_DELAY": "⏰ 每 %1 毫秒执行一次",
  "BKY_TIMER_NON_BLOCKING_DELAY_TOOLTIP": "在不使用 delay() 的情况下，以固定间隔执行代码。",
  "BKY_ARDUINO_INTERRUPT": "⚡️ 外部中断引脚 %1 在 %2 时立即执行",
  "BKY_INTERRUPT_RISING": "上升沿 (低→高)",
  "BKY_INTERRUPT_FALLING": "下降沿 (高→低)",
  "BKY_INTERRUPT_CHANGE": "电平变化",
  "BKY_ARDUINO_INTERRUPT_TOOLTIP": "⚠️ Arduino UNO：仅引脚 2,3 可用！不要在中断函数内使用 delay()、Serial。代码应尽可能短小精悍。",
  "BKY_PULSE_IN": "从引脚 %1 读取 %2 脉冲长度（超时 %3 微秒）",
  "BKY_PULSE_IN_TOOLTIP": "以微秒为单位测量引脚的脉冲长度。",
  "BKY_SHIFT_OUT": "🔄 移位寄存器 数据引脚 %1 时钟引脚 %2 锁存引脚 %3",
  "BKY_SHIFT_OUT_VALUE": "以 %1 顺序输出值 %2",
  "BKY_SHIFT_MSB_FIRST": "MSB 优先 (7→0bit)",
  "BKY_SHIFT_LSB_FIRST": "LSB 优先 (0→7bit)",
  "BKY_SHIFT_OUT_TOOLTIP": "向移位寄存器发送数据（例如：74HC595）。",
  "BKY_WAIT_UNTIL": "等待直到 %1 变为真",
  "BKY_WAIT_UNTIL_TOOLTIP": "等待直到条件变为真。",
  "BKY_CUSTOM_TEXT_JOIN": "字符串连接 %1 和 %2",
  "BKY_CUSTOM_TEXT_JOIN_TOOLTIP": "将两个文本合并为一个。",
  "BKY_CUSTOM_TEXT_CHAR_AT": "字符串 %1 中位置 %2 的字符",
  "BKY_CUSTOM_TEXT_CHAR_AT_TOOLTIP": "获取字符串中特定位置的一个字符。",
  "BKY_CUSTOM_TEXT_LENGTH": "字符串 %1 的长度",
  "BKY_CUSTOM_TEXT_LENGTH_TOOLTIP": "返回字符串中的总字符数。",
  "BKY_CUSTOM_TEXT_CONTAINS": "%1 是否包含 %2？",
  "BKY_CUSTOM_TEXT_CONTAINS_TOOLTIP": "检查一个字符串是否包含另一个字符串。",
  "BKY_COLOUR_PICKER": "颜色 %1",
  "BKY_COLOUR_PICKER_TOOLTIP": "选择一种颜色。",
  "BKY_COLOUR_RANDOM": "随机颜色",
  "BKY_COLOUR_RANDOM_TOOLTIP": "生成一种随机颜色。",
  "BKY_COLOUR_RGB": "RGB 颜色 红 %1 绿 %2 蓝 %3",
  "BKY_COLOUR_RGB_TOOLTIP": "使用红、绿、蓝值（0-255）创建颜色。",
  "BKY_COLOUR_BLEND": "以 %3 的比例混合颜色 %1 和 %2",
  "BKY_COLOUR_BLEND_TOOLTIP": "以指定比例（0.0-1.0）混合两种颜色。",
  "BKY_COLOUR_TO_HEX": "颜色 %1 转为 HEX 代码",
  "BKY_COLOUR_TO_HEX_TOOLTIP": "将颜色转换为十六进制颜色代码（#RRGGBB）。",
  "BKY_COLOUR_TO_RGB_VALUES": "颜色 %1 的 %2 值",
  "BKY_RED": "红色",
  "BKY_GREEN": "绿色",
  "BKY_BLUE": "蓝色",
  "BKY_COLOUR_TO_RGB_VALUES_TOOLTIP": "从颜色中提取红、绿、蓝值之一（0-255）。",
  "BKY_NUMBER_VARIABLE_SET": "🔢 将 %2 存入数值变量 %1",
  "BKY_NUMBER_VARIABLE_SET_TOOLTIP": "将值存入数值（浮点型）变量。也可以存储数字读取值（高/低电平）。",
  "BKY_NUMBER_VARIABLE_GET": "🔢 数值变量 %1",
  "BKY_NUMBER_VARIABLE_GET_TOOLTIP": "获取数值（浮点型）变量的值。",
  "BKY_STRING_VARIABLE_SET": "📝 将 %2 存入字符串变量 %1",
  "BKY_STRING_VARIABLE_SET_TOOLTIP": "将值存入字符串类型变量。",
  "BKY_STRING_VARIABLE_GET": "📝 字符串变量 %1",
  "BKY_STRING_VARIABLE_GET_TOOLTIP": "获取字符串类型变量的值。",
  "BKY_PROCEDURES_IFRETURN": "🔄 如果 %1 则返回 %2",
  "BKY_PROCEDURES_IFRETURN_TOOLTIP": "如果条件为真，则返回指定的值。仅在有返回值的函数内部使用。",
  "BKY_PROCEDURES_IFRETURN_VOID": "🔄 如果 %1 则结束函数",
  "BKY_PROCEDURES_IFRETURN_VOID_TOOLTIP": "如果条件为真，则结束函数。在没有返回值的函数中使用。",
  "BKY_LCD_I2C_SETUP": "📺 LCD(1602) I2C %1 设置 (地址: %2 尺寸: %3 x %4)",
  "BKY_LCD_I2C_SETUP_TOOLTIP": "设置 I2C LCD。通常地址为 0x27 或 0x3F。",
  "BKY_LCD_I2C_PRINT": "📺 LCD %1: 在第 %2 行第 %3 列打印 %4",
  "BKY_LCD_I2C_PRINT_TOOLTIP": "在指定位置输出文本。（行/列从 0 开始）",
  "BKY_LCD_I2C_CLEAR": "📺 LCD %1: 清除屏幕",
  "BKY_LCD_I2C_CLEAR_TOOLTIP": "清除整个 LCD 屏幕。",
  "BKY_LCD_I2C_CURSOR": "📺 LCD %1: 光标 %2",
  "BKY_ON": "开",
  "BKY_OFF": "关",
  "BKY_BLINK": "闪烁",
  "BKY_NO_BLINK": "不闪烁",
  "BKY_LCD_I2C_CURSOR_TOOLTIP": "控制光标显示。",
  "BKY_LCD_I2C_BACKLIGHT": "📺 LCD %1: 背光 %2",
  "BKY_LCD_I2C_BACKLIGHT_TOOLTIP": "控制 LCD 背光。",
  "BKY_LCD_I2C_SCROLL": "📺 LCD %1: 屏幕滚动 %2",
  "BKY_LEFT": "左",
  "BKY_RIGHT": "右",
  "BKY_LCD_I2C_SCROLL_TOOLTIP": "向左或向右滚动屏幕内容。",
  "BKY_LCD_I2C_DISPLAY": "📺 LCD %1: 屏幕显示 %2",
  "BKY_LCD_I2C_DISPLAY_TOOLTIP": "打开或关闭 LCD 屏幕显示。",
  "BKY_LCD_I2C_SET_CURSOR": "📺 LCD %1: 移动光标到第 %2 行第 %3 列",
  "BKY_LCD_I2C_SET_CURSOR_TOOLTIP": "将光标移动到指定位置。（行/列从 0 开始）",

  "BKY_TM1637_SETUP": "🔟设置 FND(TM1637) CLK 引脚 %1 DATA 引脚 %2",
  "BKY_TM1637_SETUP_TIP": "使用 CLK 和 DATA 引脚初始化 TM1637 四位数显示器",
  "BKY_TM1637_DISPLAY_NUMBER": "🔟显示数字 %1 %2 %3",
  "BKY_TM1637_DISPLAY_NUMBER_TIP": "显示一个数字，可选择小数点或冒号",
  "BKY_TM1637_DISPLAY_TIME": "🔟显示时间 %1 : %2 %3",
  "BKY_TM1637_DISPLAY_TIME_TIP": "以 HH:MM 格式显示时间",
  "BKY_TM1637_DISPLAY_TEXT": "🔟显示文字 %1 滚动延迟 %2 毫秒",
  "BKY_TM1637_DISPLAY_TEXT_TIP": "如果文字超过 4 个字符则滚动显示",
  "BKY_TM1637_DISPLAY_DIGIT": "🔟在位置 %1 显示数字 %2",
  "BKY_TM1637_DISPLAY_DIGIT_TIP": "在指定位置显示单个数字或字符",
  "BKY_TM1637_CLEAR": "🔟清除显示",
  "BKY_TM1637_CLEAR_TIP": "清除显示器上的所有数字",
  "BKY_TM1637_BRIGHTNESS": "🔟设置亮度 %1",
  "BKY_TM1637_BRIGHTNESS_TIP": "设置显示器亮度，从 0（最暗）到 7（最亮）",
  "BKY_TM1637_COLON_CONTROL": "🔟冒号 %1",
  "BKY_TM1637_COLON_CONTROL_TIP": "显示或隐藏数字之间的冒号",
  "BKY_TM1637_NO_DECIMAL": "无小数点",
  "BKY_TM1637_ONE_DECIMAL": "1 位小数",
  "BKY_TM1637_COLON": "带冒号 (:)",
  "BKY_TM1637_SHOW_MINUS": "显示负号",
  "BKY_TM1637_HIDE_MINUS": "隐藏负号",
  "BKY_TM1637_COLON_ON": "显示",
  "BKY_TM1637_COLON_OFF": "隐藏",
  "BKY_TM1637_POSITION_1": "第1位（左）",
  "BKY_TM1637_POSITION_2": "第2位",
  "BKY_TM1637_POSITION_3": "第3位",
  "BKY_TM1637_POSITION_4": "第4位（右）",

  "BKY_NEO_SETUP_T": "⭕NeoPixel(WS2812/B) 设置",
  "BKY_NEO_SETUP_L1": "编号: %1 | 数字引脚: %2 | LED 数量: %3",
  "BKY_NEO_SETUP_L2": "类型: %1",
  "BKY_NEO_TYPE_GRB": "GRB(标准 WS2812B)",
  "BKY_NEO_TYPE_RGB": "RGB",
  "BKY_NEO_TYPE_BRG": "BRG",
  "BKY_NEO_TYPE_BGR": "BGR",
  "BKY_NEO_TYPE_GRBW": "GRBW(RGBW)",
  "BKY_NEO_TYPE_RGBW": "RGBW",
  "BKY_NEO_SETUP_TIP": "创建 NeoPixel 对象并使用 begin/clear/show 初始化。（此块中仅创建 #include）",
  "BKY_NEO_SET_RGB": "⭕NeoPixel RGB 设置 | 灯带 %1 | LED %2 | R %3 | G %4 | B %5",
  "BKY_NEO_SET_RGB_TIP": "设置一个 LED 的 RGB 颜色。在 show() 之前不会生效。",
  "BKY_NEO_SET_RGBW": "⭕NeoPixel RGBW 设置 | 灯带 %1 | LED %2 | R %3 | G %4 | B %5 | W %6",
  "BKY_NEO_SET_RGBW_TIP": "设置 RGBW 类型灯带中一个 LED 的颜色。",
  "BKY_NEO_BRI": "⭕NeoPixel 亮度 | 灯带 %1 | 值(0~255) %2",
  "BKY_NEO_BRI_TIP": "设置整体亮度 (setBrightness)。",
  "BKY_NEO_SHOW": "⭕NeoPixel 显示 | 灯带 %1",
  "BKY_NEO_SHOW_TIP": "将缓冲区中设置的颜色反映到实际的 LED 上。",
  "BKY_NEO_CLEAR": "⭕NeoPixel 全部清除 (clear) | 灯带 %1",
  "BKY_NEO_CLEAR_TIP": "关闭所有 LED（仅缓冲区更改）。需要时调用 show()。",
  "BKY_NEO_FILL_ALL": "⭕NeoPixel 全部填充颜色 | 灯带 %1 | R %2 | G %3 | B %4",
  "BKY_NEO_FILL_ALL_TIP": "用相同的 RGB 填充所有像素。用 show() 反映出来。",
  "BKY_NEO_ANIM_RAINBOW": "⭕NeoPixel 彩虹 | 灯带 %1 | 延迟(毫秒) %2 | 重复 %3",
  "BKY_NEO_ANIM_RAINBOW_TIP": "彩虹色流动的效果（阻塞式）。",
  "BKY_NEO_ANIM_SHIFT": "⭕NeoPixel 移动 | 灯带 %1 | 方向 %2 | 步长 %3 | 延迟(毫秒) %4",
  "BKY_NEO_DIR_L": "左",
  "BKY_NEO_DIR_R": "右",
  "BKY_NEO_ANIM_SHIFT_TIP": "循环地向左/向右移动像素（阻塞式）。",
  "BKY_NEO_ANIM_BREATHE": "⭕NeoPixel 呼吸 | 灯带 %1 | R %2 | G %3 | B %4",
  "BKY_NEO_ANIM_BREATHE_L2": "最小亮度 %1 | 最大亮度 %2 | 增量 %3 | 延迟(毫秒) %4",
  "BKY_NEO_ANIM_BREATHE_TIP": "亮度逐渐增加然后减少的呼吸效果（阻塞式）。",
  "BKY_SH110X_SETUP_I2C": "📺设置 SH110X OLED %1 类型 %2 I2C 地址 %3 复位引脚 %4 宽度 %5 高度 %6",
  "BKY_SH110X_SETUP_I2C_TIP": "使用 I2C 连接设置 SH110X OLED 显示屏。",
  "BKY_SH110X_DISPLAY": "📺OLED %1 显示",
  "BKY_SH110X_DISPLAY_TIP": "在 OLED 显示屏上显示当前缓冲区。",
  "BKY_SH110X_CLEAR": "📺OLED %1 清除",
  "BKY_SH110X_CLEAR_TIP": "清除 OLED 显示屏缓冲区。",
  "BKY_SH110X_CONTROL": "📺OLED %1 %2",
  "BKY_SH110X_CONTROL_TIP": "控制 OLED 显示屏状态。",
  "BKY_SH110X_PIXEL": "📺OLED %1 绘制像素点 X %2 Y %3 颜色 %4",
  "BKY_SH110X_PIXEL_TIP": "在 OLED 显示屏上绘制一个像素点。",
  "BKY_SH110X_LINE": "📺OLED %1 从 X1 %2 Y1 %3 到 X2 %4 Y2 %5 绘制线条 颜色 %6",
  "BKY_SH110X_LINE_TIP": "在 OLED 显示屏上绘制一条线。",
  "BKY_SH110X_RECT": "📺OLED %1 绘制矩形 X %2 Y %3 宽度 %4 高度 %5 %6 颜色 %7",
  "BKY_SH110X_RECT_TIP": "在 OLED 显示屏上绘制一个矩形。",
  "BKY_SH110X_CIRCLE": "📺OLED %1 绘制圆形 X %2 Y %3 半径 %4 %5 颜色 %6",
  "BKY_SH110X_CIRCLE_TIP": "在 OLED 显示屏上绘制一个圆形。",
  "BKY_SH110X_TEXT": "📺OLED %1 打印文本 %2 X %3 Y %4 大小 %5 颜色 %6 换行 %7",
  "BKY_SH110X_TEXT_TIP": "在 OLED 显示屏上打印文本。",
  "BKY_SH110X_CONTRAST": "📺OLED %1 设置对比度 %2",
  "BKY_SH110X_CONTRAST_TIP": "设置 OLED 显示屏对比度 (0-255)。",
  "BKY_SH110X_ACTION_INVERT": "反相显示",
  "BKY_SH110X_ACTION_NORMAL": "正常显示",
  "BKY_SH110X_ACTION_ON": "打开",
  "BKY_SH110X_ACTION_OFF": "关闭",
  "BKY_SH110X_COLOR_WHITE": "白色",
  "BKY_SH110X_COLOR_BLACK": "黑色",
  "BKY_SH110X_COLOR_INVERSE": "反色",
  "BKY_SH110X_FILL_OUTLINE": "轮廓",
  "BKY_SH110X_FILL_FILLED": "填充",
  "BKY_SH110X_WRAP_NO": "不换行",
  "BKY_SH110X_WRAP_YES": "换行",
  "BKY_HT16_SETUP": "📲I2C 点阵屏(HT16K33) 设置",
  "BKY_HT16_SETUP_1": "编号 %1 | 设备 %2 | I2C 地址 %3",
  "BKY_DM_8X8": "8×8",
  "BKY_DM_8X16": "8×16",
  "BKY_DM_8X16MINI": "8×16 迷你",
  "BKY_DM_BICOLOR8": "双色 8×8",
  "BKY_HT16_SETUP_2": "亮度(0~15) %1 | 闪烁 %2 | 旋转 %3",
  "BKY_BLINK_2HZ": "2 赫兹",
  "BKY_BLINK_1HZ": "1 赫兹",
  "BKY_BLINK_0_5HZ": "0.5 赫兹",
  "BKY_HT16_SETUP_TIP": "包含所需库并设置 begin/brightness/blink/rotation。（此块中仅创建 #include）",
  "BKY_HT16_BRI": "📲I2C 点阵屏 %1 亮度(0~15) %2",
  "BKY_HT16_BRI_TIP": "setBrightness()",
  "BKY_HT16_BLINK": "📲I2C 点阵屏 %1 闪烁 %2",
  "BKY_HT16_BLINK_TIP": "blinkRate()",
  "BKY_HT16_PIXEL": "📲I2C 点阵屏 %1 | 行 %2 | 列 %3 | 像素 %4",
  "BKY_HT16_PIXEL_TIP": "单色：1=亮，0=灭。（行/列从 1 开始）",
  "BKY_HT16_BIPIX": "📲I2C 双色点阵屏 %1 | 行 %2 | 列 %3 | 颜色 %4",
  "BKY_YELLOW": "黄色",
  "BKY_HT16_BIPIX_TIP": "双色点阵屏专用 drawPixel(x,y,color)",
  "BKY_HT16_P8": "📲8×8 点阵屏 %1 | 图案",
  "BKY_HT16_P8_TIP": "单击切换像素并在缓冲区中绘制。使用“显示”块来反映输出。",
  "BKY_HT16_P816": "📲8×16 点阵屏 %1 | 图案",
  "BKY_HT16_P816_TIP": "在 16 宽 × 8 高的网格中编辑（用于实际的 8×16 设备）",
  "BKY_HT16_LINE": "📲I2C 点阵屏 %1 | (行 %2, 列 %3) → (行 %4, 列 %5) 绘制线条",
  "BKY_HT16_LINE_TIP": "Adafruit_GFX drawLine",
  "BKY_HT16_CIR": "📲I2C 点阵屏 %1 | 中心(行 %2, 列 %3) | 半径 %4 | 绘制圆形",
  "BKY_HT16_CIR_TIP": "Adafruit_GFX drawCircle",
  "BKY_HT16_RECT": "📲I2C 点阵屏 %1 | 起点(行 %2, 列 %3) | 大小 %4 × %5 | 矩形 %6",
  "BKY_HT16_RECT_TIP": "drawRect / fillRect",
  "BKY_HT16_SHOW": "📲I2C 点阵屏 %1 | 显示",
  "BKY_HT16_SHOW_TIP": "使用 writeDisplay() 反映出来",
  "BKY_HT16_CLR": "📲I2C 点阵屏 %1 | 清除屏幕",
  "BKY_HT16_CLR_TIP": "仅执行 clear()",
  "BKY_HT16_SCROLL": "📲I2C 点阵屏 %1 | 文本 %2 | 滚动 %3 | 延迟(秒) %4",
  "BKY_HT16_SCROLL_TIP": "向左/向右滚动 GFX 文本输出",
  "BKY_SSD1306_SETUP_I2C": "💻设置 SSD1306 OLED %1 宽度 %2 高度 %3 I2C 地址 %4 复位引脚 %5",
  "BKY_SSD1306_SETUP_I2C_TIP": "使用 I2C 连接设置 SSD1306 OLED 显示屏。",
  "BKY_SSD1306_CONTROL": "💻OLED %1 %2",
  "BKY_SSD1306_CONTROL_TIP": "控制 OLED 显示屏基本功能。",
  "BKY_SSD1306_DIM": "💻OLED %1 调暗 %2",
  "BKY_SSD1306_DIM_TIP": "设置 OLED 显示屏调暗模式。",
  "BKY_SSD1306_PIXEL": "💻OLED %1 绘制像素点 X %2 Y %3 颜色 %4",
  "BKY_SSD1306_PIXEL_TIP": "在 OLED 显示屏上绘制一个像素点。",
  "BKY_SSD1306_LINE": "💻OLED %1 从 X1 %2 Y1 %3 到 X2 %4 Y2 %5 绘制线条 颜色 %6",
  "BKY_SSD1306_LINE_TIP": "在 OLED 显示屏上绘制一条线。",
  "BKY_SSD1306_RECT": "💻OLED %1 绘制矩形 X %2 Y %3 宽度 %4 高度 %5 %6 颜色 %7",
  "BKY_SSD1306_RECT_TIP": "在 OLED 显示屏上绘制一个矩形。",
  "BKY_SSD1306_CIRCLE": "💻OLED %1 绘制圆形 X %2 Y %3 半径 %4 %5 颜色 %6",
  "BKY_SSD1306_CIRCLE_TIP": "在 OLED 显示屏上绘制一个圆形。",
  "BKY_SSD1306_TEXT": "💻OLED %1 打印文本 %2 X %3 Y %4 大小 %5 颜色 %6 换行 %7",
  "BKY_SSD1306_TEXT_TIP": "在 OLED 显示屏上打印文本。",
  "BKY_SSD1306_SCROLL": "💻OLED %1 滚动 %2 开始 %3 停止 %4",
  "BKY_SSD1306_SCROLL_TIP": "控制 OLED 显示屏滚动功能。",
  "BKY_SSD1306_ACTION_DISPLAY": "显示",
  "BKY_SSD1306_ACTION_CLEAR": "清除",
  "BKY_SSD1306_ACTION_INVERT": "反相",
  "BKY_SSD1306_ACTION_NORMAL": "正常",
  "BKY_SSD1306_DIM_ON": "开",
  "BKY_SSD1306_DIM_OFF": "关",
  "BKY_SSD1306_COLOR_WHITE": "白色",
  "BKY_SSD1306_COLOR_BLACK": "黑色",
  "BKY_SSD1306_COLOR_INVERSE": "反色",
  "BKY_SSD1306_FILL_OUTLINE": "轮廓",
  "BKY_SSD1306_FILL_FILLED": "填充",
  "BKY_SSD1306_WRAP_NO": "不换行",
  "BKY_SSD1306_WRAP_YES": "换行",
  "BKY_SSD1306_SCROLL_RIGHT": "右",
  "BKY_SSD1306_SCROLL_LEFT": "左",
  "BKY_SSD1306_SCROLL_DIAG_RIGHT": "右斜",
  "BKY_SSD1306_SCROLL_DIAG_LEFT": "左斜",
  "BKY_SSD1306_SCROLL_STOP": "停止",
  "BKY_ULTRA_SETUP": "🔊 设置超声波传感器 触发引脚 %1 回波引脚 %2",
  "BKY_ULTRA_SETUP_TIP": "配置超声波传感器。指定触发/回波引脚。",
  "BKY_ULTRA_DISTANCE": "🔊 超声波距离 单位 %1",
  "BKY_UNIT_CM": "厘米",
  "BKY_UNIT_MM": "毫米",
  "BKY_ULTRA_DISTANCE_TIP": "使用超声波传感器测量距离。",
  "BKY_DHT_SETUP": "🌡️ 温湿度传感器(DHT00): 引脚 %1 类型 %2 设置",
  "BKY_DHT_SETUP_TOOLTIP": "设置 DHT 温湿度传感器。",
  "BKY_DHT_READ_TEMPERATURE": "🌡️ DHT 传感器: 引脚 %1 读取温度 %2",
  "BKY_TEMP_CELSIUS": "摄氏度 (°C)",
  "BKY_TEMP_FAHRENHEIT": "华氏度 (°F)",
  "BKY_DHT_READ_TEMPERATURE_TOOLTIP": "从 DHT 传感器读取温度。",
  "BKY_DHT_READ_HUMIDITY": "🌡️ DHT 传感器: 引脚 %1 读取湿度",
  "BKY_DHT_READ_HUMIDITY_TOOLTIP": "从 DHT 传感器读取湿度。",
  "BKY_DHT_CONVERT_TEMPERATURE": "🌡️ 温度转换: %1 %2 → %3",
  "BKY_DHT_CONVERT_TEMPERATURE_TOOLTIP": "在摄氏度和华氏度之间转换温度。",
  "BKY_DHT_HEAT_INDEX": "🌡️ 热指数计算: 温度 %1 湿度 %2% 单位 %3",
  "BKY_DHT_HEAT_INDEX_TOOLTIP": "使用温度和湿度计算体感温度（热指数）。",
  "BKY_DALLAS_SETUP": "💦 设置水温传感器引脚 %1",
  "BKY_DALLAS_SETUP_TIP": "配置水温传感器。指定数据引脚号。",
  "BKY_DALLAS_READ": "💦 水温传感器 %1 读数 单位 %2",
  "BKY_DALLAS_READ_TIP": "读取所选传感器的温度。（索引从 0 开始）",
  "BKY_DALLAS_COUNT": "💦 连接的水温传感器数量",
  "BKY_DALLAS_COUNT_TIP": "返回连接的水温传感器数量。",
  "BKY_DALLAS_REQUEST": "💦 开始为所有水温传感器测量",
  "BKY_DALLAS_REQUEST_TIP": "开始为所有水温传感器进行温度转换。",
  "BKY_HX711_SETUP": "⚖️ 重量传感器(HX711): DOUT 引脚 %1 CLK 引脚 %2 增益 %3 设置",
  "BKY_GAIN_128_A": "128 (通道 A)",
  "BKY_GAIN_64_A": "64 (通道 A)",
  "BKY_GAIN_32_B": "32 (通道 B)",
  "BKY_HX711_SETUP_TOOLTIP": "设置 HX711 重量传感器。",
  "BKY_HX711_GET_WEIGHT": "⚖️ HX711 重量传感器测量重量",
  "BKY_HX711_GET_WEIGHT_TOOLTIP": "使用 HX711 传感器测量重量。",
  "BKY_HX711_TARE": "⚖️ HX711 重量传感器零点调整 %1 次",
  "BKY_HX711_TARE_TOOLTIP": "将当前重量设置为 0。",
  "BKY_HX711_SET_SCALE": "⚖️ HX711 重量传感器比例尺设置 %1",
  "BKY_HX711_SET_SCALE_TOOLTIP": "设置用于重量计算的比例尺值。",
  "BKY_HX711_IS_READY": "⚖️ HX711 重量传感器就绪状态检查",
  "BKY_HX711_IS_READY_TOOLTIP": "检查传感器是否准备好读取数据。",
  "BKY_HX711_POWER_CONTROL": "⚖️ HX711 重量传感器电源 %1",
  "BKY_POWER_ON": "开",
  "BKY_POWER_OFF": "关",
  "BKY_HX711_POWER_CONTROL_TOOLTIP": "控制传感器电源。",
  "BKY_HX711_READ_DATA": "⚖️ HX711 重量传感器读取数据 %1",
  "BKY_RAW_VALUE": "原始值",
  "BKY_AVERAGE_VALUE": "平均值",
  "BKY_ACTUAL_VALUE": "实际值",
  "BKY_HX711_READ_DATA_TOOLTIP": "从传感器读取各种类型的数据。",
  "BKY_I2C_WEIGHT_SETUP": "设置 I2C 重量传感器地址 %1",
  "BKY_I2C_WEIGHT_SETUP_TIP": "使用从地址初始化 I2C 重量传感器。",
  "BKY_I2C_WEIGHT_READ": "从 I2C 传感器读取重量",
  "BKY_I2C_WEIGHT_READ_TIP": "从 I2C 重量传感器读取重量值。",
  "BKY_I2C_WEIGHT_AVAILABLE": "I2C 重量传感器可用",
  "BKY_I2C_WEIGHT_AVAILABLE_TIP": "检查 I2C 重量传感器是否连接并响应。",
  "BKY_I2C_WEIGHT_RAW_DATA": "从 I2C 传感器读取原始数据字节 %1",
  "BKY_I2C_WEIGHT_RAW_DATA_TIP": "从 I2C 重量传感器读取原始字节数据。",
  "BKY_I2C_WEIGHT_BYTE_0": "字节 0 (状态)",
  "BKY_I2C_WEIGHT_BYTE_1": "字节 1 (高位)",
  "BKY_I2C_WEIGHT_BYTE_2": "字节 2 (低位)",
  "BKY_ROTARY_SETUP": "🔄 旋转编码器: DT 引脚 %1 CLK 引脚 %2 设置",
  "BKY_ROTARY_SETUP_TOOLTIP": "设置旋转编码器。",
  "BKY_ROTARY_GET_VALUE": "🔄 旋转编码器旋转值",
  "BKY_ROTARY_GET_VALUE_TOOLTIP": "读取旋转编码器的旋转值。（1:顺时针, -1:逆时针, 0:无变化）",
  "BKY_ROTARY_DIRECTION": "🔄 旋转编码器旋转方向",
  "BKY_ROTARY_DIRECTION_TOOLTIP": "以字符串形式返回旋转编码器的旋转方向。",
  "BKY_ROTARY_COUNTER": "🔄 旋转编码器累积计数器",
  "BKY_ROTARY_COUNTER_TOOLTIP": "累积旋转编码器的旋转量并返回计数器值。",
  "BKY_ROTARY_RESET_COUNTER": "🔄 旋转编码器计数器重置",
  "BKY_ROTARY_RESET_COUNTER_TOOLTIP": "将旋转编码器的累积计数器重置为 0。",
  "BKY_THERMISTOR_SETUP": "🌡️ 热敏电阻温度传感器: 模拟引脚 %1 标称电阻 %2Ω Beta 系数 %3 串联电阻 %4Ω 设置",
  "BKY_THERMISTOR_SETUP_TOOLTIP": "设置热敏电阻温度传感器。",
  "BKY_THERMISTOR_READ_TEMPERATURE": "🌡️ 热敏电阻温度传感器温度测量 %1",
  "BKY_THERMISTOR_READ_TEMPERATURE_TOOLTIP": "使用热敏电阻传感器测量温度。",
  "BKY_THERMISTOR_READ_RAW": "🌡️ 热敏电阻温度传感器原始值",
  "BKY_THERMISTOR_READ_RAW_TOOLTIP": "读取热敏电阻传感器的原始值。（0.1°C 单位）",
  "BKY_THERMISTOR_GET_RESISTANCE": "🌡️ 热敏电阻温度传感器电阻值",
  "BKY_THERMISTOR_GET_RESISTANCE_TOOLTIP": "计算并返回热敏电阻的当前电阻值。",
  "BKY_PMS_SETUP": "💨 细颗粒物传感器(PMS-X003): 串口 %1 RX 引脚 %2 TX 引脚 %3 波特率 %4 设置",
  "BKY_PMS_SETUP_TOOLTIP": "设置 PMS 细颗粒物传感器。（使用硬件串口时忽略引脚设置）",
  "BKY_PMS_POWER_CONTROL": "💨 PMS 细颗粒物传感器电源 %1",
  "BKY_WAKE_UP": "唤醒",
  "BKY_SLEEP_MODE": "睡眠模式",
  "BKY_PMS_POWER_CONTROL_TOOLTIP": "控制传感器电源状态。",
  "BKY_PMS_SET_MODE": "💨 PMS 细颗粒物传感器模式设置 %1",
  "BKY_ACTIVE_MODE": "主动模式",
  "BKY_PASSIVE_MODE": "被动模式",
  "BKY_PMS_SET_MODE_TOOLTIP": "设置传感器工作模式。",
  "BKY_PMS_READ_DATA": "💨 PMS 细颗粒物传感器 %1 测量",
  "BKY_PM1_0_STANDARD": "PM1.0 (标准)",
  "BKY_PM2_5_STANDARD": "PM2.5 (标准)",
  "BKY_PM10_STANDARD": "PM10 (标准)",
  "BKY_PM1_0_ATMOSPHERIC": "PM1.0 (大气)",
  "BKY_PM2_5_ATMOSPHERIC": "PM2.5 (大气)",
  "BKY_PM10_ATMOSPHERIC": "PM10 (大气)",
  "BKY_PMS_READ_DATA_TOOLTIP": "测量细颗粒物浓度。(μg/m³)",
  "BKY_PMS_REQUEST_READ": "💨 PMS 细颗粒物传感器手动读取请求",
  "BKY_PMS_REQUEST_READ_TOOLTIP": "在手动模式下请求数据读取。",
  "BKY_PMS_DATA_AVAILABLE": "💨 PMS 细颗粒物传感器数据就绪",
  "BKY_PMS_DATA_AVAILABLE_TOOLTIP": "检查是否有新数据就绪。",
  "BKY_MHZ19_SETUP": "⚠️MHZ19 二氧化碳传感器设置 串口 %1 RX 引脚 %2 TX 引脚 %3 通信速度 %4",
  "BKY_SERIAL_SOFT": "软件串口",
  "BKY_SERIAL_HARD": "硬件串口",
  "BKY_SERIAL_HARD1": "硬件串口1",
  "BKY_SERIAL_HARD2": "硬件串口2",
  "BKY_MHZ19_SETUP_TOOLTIP": "初始化 MHZ19 二氧化碳传感器。",
  "BKY_MHZ19_SET_RANGE": "⚠️MHZ19 测量范围设置: %1 ppm",
  "BKY_MHZ19_SET_RANGE_TOOLTIP": "设置二氧化碳测量范围。（默认值：2000ppm）",
  "BKY_MHZ19_FILTER": "⚠️MHZ19 滤波器模式 %1 类型 %2",
  "BKY_FILTER_ON": "开",
  "BKY_FILTER_OFF": "关",
  "BKY_FILTER_CLEAR": "清除模式",
  "BKY_FILTER_NORMAL": "正常模式",
  "BKY_MHZ19_FILTER_TOOLTIP": "设置传感器滤波器模式。",
  "BKY_MHZ19_READ": "⚠️MHZ19 读取值: %1",
  "BKY_MHZ19_CO2": "二氧化碳(ppm)",
  "BKY_MHZ19_CO2_UNLIM": "二氧化碳无限制(ppm)",
  "BKY_MHZ19_TEMP": "温度(℃)",
  "BKY_MHZ19_RAW": "原始二氧化碳",
  "BKY_MHZ19_TRANS": "透射率(%)",
  "BKY_MHZ19_ACCURACY": "精度",
  "BKY_MHZ19_READ_TOOLTIP": "从 MHZ19 传感器读取所选值。",
  "BKY_MHZ19_CAL": "⚠️MHZ19 %1 周期(小时): %2",
  "BKY_CAL_AUTO_ON": "自动校准开",
  "BKY_CAL_AUTO_OFF": "自动校准关",
  "BKY_CAL_ZERO": "执行零点校准",
  "BKY_CAL_RESET": "重置",
  "BKY_MHZ19_CAL_TOOLTIP": "执行 MHZ19 传感器校准。",
  "BKY_MHZ19_STATUS": "⚠️MHZ19 状态读取: %1",
  "BKY_STATUS_RANGE": "测量范围",
  "BKY_STATUS_ABC": "ABC 状态",
  "BKY_STATUS_BG_CO2": "背景二氧化碳",
  "BKY_STATUS_VERSION": "版本信息",
  "BKY_MHZ19_STATUS_TOOLTIP": "从 MHZ19 传感器读取状态信息。",
  "BKY_GRAVITY_TDS_SETUP": "🌊 TDS 传感器(GravityTDS) 设置引脚 %1",
  "BKY_GRAVITY_TDS_SETUP_TOOLTIP": "初始化 DFRobot GravityTDS 传感器。",
  "BKY_GRAVITY_TDS_TEMP": "🌊 TDS 传感器温度补偿设置: %1 ℃",
  "BKY_GRAVITY_TDS_TEMP_TOOLTIP": "设置温度补偿值以提高测量精度。",
  "BKY_GRAVITY_TDS_UPDATE": "🌊 TDS 传感器更新值",
  "BKY_GRAVITY_TDS_UPDATE_TOOLTIP": "从传感器读取新值并执行计算。",
  "BKY_GRAVITY_TDS_READ": "🌊 TDS 传感器读取值: %1",
  "BKY_TDS_VALUE": "TDS 值(ppm)",
  "BKY_EC_VALUE": "EC 值(μS/cm)",
  "BKY_K_VALUE": "K 值",
  "BKY_GRAVITY_TDS_READ_TOOLTIP": "读取 TDS、EC 或 K 值。",
  "BKY_GRAVITY_TDS_ADV": "🌊 TDS 传感器高级设置 %1 值: %2",
  "BKY_ADC_REF": "ADC 参考电压(V)",
  "BKY_ADC_RANGE": "ADC 范围",
  "BKY_K_ADDRESS": "K 值保存地址",
  "BKY_GRAVITY_TDS_ADV_TOOLTIP": "更改传感器的高级设置。",
  "BKY_DFROBOT_PH_SETUP": "🧪设置 pH 传感器引脚 %1",
  "BKY_DFROBOT_PH_SETUP_TIP": "使用模拟引脚初始化 pH 传感器。",
  "BKY_DFROBOT_PH_READ": "🧪在温度 %1 °C 下读取 pH 值",
  "BKY_DFROBOT_PH_READ_TIP": "读取带有温度补偿的 pH 值。",
  "BKY_DFROBOT_PH_VOLTAGE": "🧪读取 pH 传感器电压",
  "BKY_DFROBOT_PH_VOLTAGE_TIP": "从 pH 传感器读取原始电压。",
  "BKY_DFROBOT_PH_CALIBRATION": "🧪pH 校准命令 %1",
  "BKY_DFROBOT_PH_CALIBRATION_TIP": "向 pH 传感器发送校准命令。",
  "BKY_DFROBOT_PH_ENTER": "进入校准",
  "BKY_DFROBOT_PH_CALIBRATE": "校准",
  "BKY_DFROBOT_PH_EXIT": "退出校准",
  "BKY_FINGERPRINT_SETUP": "👆指纹传感器设置 串口 %1 RX 引脚 %2 TX 引脚 %3 通信速度 %4",
  "BKY_FINGERPRINT_SETUP_TOOLTIP": "初始化 Adafruit 指纹传感器。",
  "BKY_FINGERPRINT_ENROLL": "👆指纹注册流程 %1 ID 号: %2",
  "BKY_GET_IMAGE": "获取图像",
  "BKY_CONVERT_TEMPLATE": "转换模板",
  "BKY_CREATE_MODEL": "创建模型",
  "BKY_STORE_MODEL": "存储模型",
  "BKY_FINGERPRINT_ENROLL_TOOLTIP": "逐步执行指纹注册流程。",
  "BKY_FINGERPRINT_SEARCH": "👆指纹识别模式: %1",
  "BKY_FAST_SEARCH": "快速搜索",
  "BKY_NORMAL_SEARCH": "正常搜索",
  "BKY_FINGERPRINT_SEARCH_TOOLTIP": "尝试与已注册的指纹进行匹配。",
  "BKY_FINGERPRINT_RESULT": "👆指纹识别结果: %1",
  "BKY_FINGER_ID": "手指 ID",
  "BKY_CONFIDENCE": "置信度",
  "BKY_TEMPLATE_COUNT": "注册数量",
  "BKY_FINGERPRINT_RESULT_TOOLTIP": "获取指纹识别结果信息。",
  "BKY_FINGERPRINT_DATABASE": "👆指纹数据库 %1 ID: %2",
  "BKY_DELETE_ID": "删除 ID",
  "BKY_EMPTY_ALL": "清空所有",
  "BKY_GET_COUNT": "获取数量",
  "BKY_FINGERPRINT_DATABASE_TOOLTIP": "管理指纹数据库。",
  "BKY_FINGERPRINT_LED": "👆指纹传感器 LED 控制 %1",
  "BKY_LED_ON": "开",
  "BKY_LED_OFF": "关",
  "BKY_LED_BREATHING": "呼吸效果",
  "BKY_LED_FLASHING": "闪烁",
  "BKY_FINGERPRINT_LED_TOOLTIP": "控制指纹传感器的 LED。",
  "BKY_TURBIDITY_SETUP": "💧浊度传感器设置 模拟引脚 %1",
  "BKY_TURBIDITY_SETUP_TOOLTIP": "初始化浊度传感器并设置采样数组。",
  "BKY_TURBIDITY_CALIBRATE": "💧浊度传感器零点调整（清水）",
  "BKY_TURBIDITY_CALIBRATE_TOOLTIP": "在清水中测量参考电压以校准零点。",
  "BKY_TURBIDITY_READ": "💧浊度传感器读取值: %1",
  "BKY_TURBIDITY_NTU": "浊度(NTU)",
  "BKY_TURBIDITY_VOLTAGE": "电压(V)",
  "BKY_TURBIDITY_RAW": "原始值",
  "BKY_TURBIDITY_READ_TOOLTIP": "从浊度传感器读取 NTU、电压或原始值。",
  "BKY_TURBIDITY_UPDATE": "💧浊度传感器更新值",
  "BKY_TURBIDITY_UPDATE_TOOLTIP": "采样传感器值并更新数组。在 loop() 中调用。",
  "BKY_UV_SETUP": "😎UV 传感器设置 模拟引脚 %1",
  "BKY_UV_SETUP_TOOLTIP": "初始化 UV 传感器并设置测量变量。",
  "BKY_UV_CALIBRATE": "😎UV 传感器校准 %1 参考电压: %2 mV",
  "BKY_CAL_INDOOR": "室内（零点调整）",
  "BKY_CAL_OUTDOOR": "室外参考设置",
  "BKY_CAL_CUSTOM": "自定义设置",
  "BKY_UV_CALIBRATE_TOOLTIP": "使用室内/室外参考校准 UV 传感器。",
  "BKY_UV_READ": "😎UV 传感器读取值: %1",
  "BKY_UV_INDEX": "UV 指数",
  "BKY_UV_VOLTAGE": "电压(V)",
  "BKY_UV_VOLTAGE_MV": "电压(mV)",
  "BKY_UV_RAW": "原始值",
  "BKY_UV_READ_TOOLTIP": "从 UV 传感器读取 UV 指数、电压或原始值。",
  "BKY_DS1307_SETUP": "🕒设置 DS1307 RTC %1",
  "BKY_DS1307_SETUP_TIP": "初始化 DS1307 实时时钟模块。",
  "BKY_DS1307_SET_TIME": "🕒RTC %1 设置时间 年 %2 月 %3 日 %4 时 %5 分 %6 秒 %7",
  "BKY_DS1307_SET_TIME_TIP": "在 RTC 模块上设置当前日期和时间。",
  "BKY_DS1307_GET_TIME": "🕒RTC %1 获取 %2",
  "BKY_DS1307_GET_TIME_TIP": "从 RTC 模块获取特定时间值。",
  "BKY_DS1307_CLOCK_CONTROL": "🕒RTC %1 时钟 %2",
  "BKY_DS1307_CLOCK_CONTROL_TIP": "启动或停止 RTC 时钟。",
  "BKY_DS1307_SQW_OUTPUT": "🕒RTC %1 SQW 输出 %2",
  "BKY_DS1307_SQW_OUTPUT_TIP": "设置 SQW 引脚输出类型。",
  "BKY_DS1307_GET_TIME_STRING": "🕒RTC %1 获取时间字符串 格式 %2",
  "BKY_DS1307_GET_TIME_STRING_TIP": "从 RTC 获取格式化的时间字符串。",
  "BKY_DS1307_TIME_YEAR": "年",
  "BKY_DS1307_TIME_MONTH": "月",
  "BKY_DS1307_TIME_DATE": "日",
  "BKY_DS1307_TIME_HOUR": "时",
  "BKY_DS1307_TIME_MINUTE": "分",
  "BKY_DS1307_TIME_SECOND": "秒",
  "BKY_DS1307_TIME_DAY_OF_WEEK": "星期几",
  "BKY_DS1307_CLOCK_START": "开始",
  "BKY_DS1307_CLOCK_STOP": "停止",
  "BKY_DS1307_OUTPUT_HIGH": "高",
  "BKY_DS1307_OUTPUT_LOW": "低",
  "BKY_DS1307_OUTPUT_1HZ": "1 赫兹",
  "BKY_DS1307_OUTPUT_4KHZ": "4 千赫",
  "BKY_DS1307_OUTPUT_8KHZ": "8 千赫",
  "BKY_DS1307_OUTPUT_32KHZ": "32 千赫",
  "BKY_DS1307_FORMAT_DATETIME": "YYYY/MM/DD HH:MM:SS",
  "BKY_DS1307_FORMAT_DATE": "YYYY/MM/DD",
  "BKY_DS1307_FORMAT_TIME": "HH:MM:SS",
  "BKY_BMP280_SETUP": "⛰️气压高度(BMP280)传感器设置",
  "BKY_BMP280_SETUP_TOOLTIP": "初始化 DFRobot BMP280 气压温度传感器。",
  "BKY_BMP280_SET_SEA_PRESSURE": "⛰️BMP280 海平面气压设置: %1 百帕 (天气数据)",
  "BKY_BMP280_SET_SEA_PRESSURE_TOOLTIP": "设置由天气服务提供的区域海平面气压，以进行精确的高度测量。",
  "BKY_BMP280_SET_REFERENCE": "⛰️BMP280 将当前位置设置为 %1 米参考点",
  "BKY_BMP280_SET_REFERENCE_TOOLTIP": "将当前位置设置为相对高度测量的参考点。",
  "BKY_BMP280_READ": "⛰️BMP280 值 | 项目 %1",
  "BKY_BMP280_PRES_PA": "气压(帕)",
  "BKY_BMP280_PRES_HPA": "气压(百帕)",
  "BKY_BMP280_ALT": "高度(米)",
  "BKY_BMP280_REL_ALT": "相对高度(米)",
  "BKY_BMP280_TEMP": "温度(℃)",
  "BKY_BMP280_READ_TOOLTIP": "从 BMP280 传感器读取温度、气压、高度值。",
  "BKY_MPU_SETUP": "🛰️ 设置陀螺仪传感器 (MPU6050)",
  "BKY_MPU_SETUP_TOOLTIP": "通过 I2C (Wire) 初始化 MPU6050 并包含所需库。",
  "BKY_MPU_UPDATE": "🛰️ 更新 MPU6050 值",
  "BKY_MPU_UPDATE_TIP": "读取传感器值以刷新内部状态。在 loop() 中重复调用。",
  "BKY_MPU_READ": "🛰️ 读取 MPU6050 值: %1",
  "BKY_MPU_TEMP": "温度(℃)",
  "BKY_MPU_ANGLE_X": "角度 X(°)",
  "BKY_MPU_ANGLE_Y": "角度 Y(°)",
  "BKY_MPU_ANGLE_Z": "角度 Z(°)",
  "BKY_MPU_ACC_X": "加速度 X(g)",
  "BKY_MPU_ACC_Y": "加速度 Y(g)",
  "BKY_MPU_ACC_Z": "加速度 Z(g)",
  "BKY_MPU_GYRO_X": "陀螺仪 X(°/s)",
  "BKY_MPU_GYRO_Y": "陀螺仪 Y(°/s)",
  "BKY_MPU_GYRO_Z": "陀螺仪 Z(°/s)",
  "BKY_MPU_READ_TIP": "在 update() 后返回所选值。",
  "BKY_MPU_SET_OFFSETS": "🛰️ 设置陀螺仪偏移量 X:%1 Y:%2 Z:%3",
  "BKY_MPU_SET_OFFSETS_TIP": "手动设置陀螺仪偏移量值。",
  "BKY_MPU_CALC_OFFSETS": "🛰️ 自动计算陀螺仪偏移量 稳定:%1ms 测量:%2ms",
  "BKY_MPU_CALC_OFFSETS_TIP": "将开发板平放并运行。自动计算陀螺仪偏移量。",
  "BKY_SGP30_SETUP": "🌿 CO2 传感器(SGP30) 设置 I2C 启动 + 传感器初始化 | 初始 eCO2 基线 %1 | TVOC 基线 %2",
  "BKY_SGP30_SETUP_TOOLTIP": "Wire.begin(); sgp.begin(); (可选) setIAQBaseline(eCO2_base, TVOC_base)",
  "BKY_SGP30_MEASURE": "🌿 SGP30 执行测量 (eCO2/TVOC 更新)",
  "BKY_SGP30_MEASURE_TOOLTIP": "使用 IAQmeasure() 调用更新 eCO2(ppm)、TVOC(ppb)",
  "BKY_SGP30_GET_ECO2": "🌿 eCO2 (ppm)",
  "BKY_SGP30_GET_ECO2_TOOLTIP": "上次测量的 eCO2 值 (ppm)",
  "BKY_SGP30_GET_TVOC": "🌿 TVOC (ppb)",
  "BKY_SGP30_GET_TVOC_TOOLTIP": "上次测量的 TVOC 值 (ppb)",
  "BKY_SGP30_SET_HUM": "🌿 设置湿度补偿 (绝对湿度 mg/m³) %1",
  "BKY_SGP30_SET_HUM_TOOLTIP": "setHumidity(absolute_humidity)",
  "BKY_SGP30_SET_BASE": "🌿 设置基线 eCO2 %1 | TVOC %2",
  "BKY_SGP30_SET_BASE_TOOLTIP": "setIAQBaseline(eCO2_base, TVOC_base)",
  "BKY_SGP30_EE_SAVE_FIXED": "🌿 SGP30 保存基线 (EEPROM 固定地址)",
  "BKY_SGP30_EE_SAVE_FIXED_TIP": "将 eCO2→地址0, TVOC→地址2 保存。",
  "BKY_SGP30_EE_LOAD_FIXED": "🌿 SGP30 加载基线 (EEPROM 固定地址)",
  "BKY_SGP30_EE_LOAD_FIXED_TIP": "从地址 0/2 读取并应用 setIAQBaseline",
  "BKY_SGP30_EE_SAVE": "🌿 SGP30 保存基线 | eCO2 地址 %1 | TVOC 地址 %2",
  "BKY_SGP30_EE_SAVE_TIP": "读取 getIAQBaseline() 并保存到指定地址",
  "BKY_SGP30_EE_LOAD": "🌿 SGP30 加载基线 | eCO2 地址 %1 | TVOC 地址 %2",
  "BKY_SGP30_EE_LOAD_TIP": "从 EEPROM 读取并应用 setIAQBaseline",
  "BKY_VL53_SETUP": "📏 激光测距传感器(VL53L0X) 设置 I2C 地址 %1",
  "BKY_VL53_SETUP_TIP": "Wire.begin(); vl53.begin(address); (例如：0x29)",
  "BKY_VL53_SET_MODE": "📏 VL53L0X 模式设置 | 测量模式 %1 | 精度 %2",
  "BKY_VL53_MODE_SINGLE": "单次测量(eSingle)",
  "BKY_VL53_MODE_CONT": "连续测量(eContinuous)",
  "BKY_VL53_PREC_HIGH": "高精度(eHigh)",
  "BKY_VL53_PREC_LOW": "低精度(eLow)",
  "BKY_VL53_SET_MODE_TIP": "setMode(mode, precision) 调用",
  "BKY_VL53_CTRL": "📏 VL53L0X 控制 %1",
  "BKY_VL53_START": "开始测量",
  "BKY_VL53_STOP": "停止测量",
  "BKY_VL53_CTRL_TIP": "start()/stop()",
  "BKY_VL53_READ": "📏 VL53L0X 读取 %1",
  "BKY_VL53_VAL_DIST": "距离(毫米)",
  "BKY_VL53_VAL_AMBIENT": "环境光(ambient)",
  "BKY_VL53_VAL_SIGNAL": "信号强度(signal)",
  "BKY_VL53_VAL_STATUS": "状态码(status)",
  "BKY_VL53_READ_TIP": "getDistance()/getAmbientCount()/getSignalCount()/getStatus()",
  "BKY_SHT31_SETUP": "🌡️ 温湿度(SHT31)传感器设置 | I2C 地址 %1",
  "BKY_SHT31_SETUP_TIP": "初始化 SHT31 温湿度传感器",
  "BKY_SHT31_READ": "🌡️ SHT31 传感器读取 %1",
  "BKY_SHT31_FAST": "快速读取",
  "BKY_SHT31_SLOW": "精确读取",
  "BKY_SHT31_READ_TIP": "从 SHT31 传感器读取温湿度数据",
  "BKY_SHT31_CONNECTED": "🌡️ SHT31 传感器已连接",
  "BKY_SHT31_CONNECTED_TIP": "检查 SHT31 传感器是否连接",
  "BKY_SHT31_GET_DATA": "🌡️ SHT31 %1",
  "BKY_SHT31_TEMP_C": "温度 (°C)",
  "BKY_SHT31_TEMP_F": "温度 (°F)",
  "BKY_SHT31_HUMIDITY": "湿度 (%)",
  "BKY_SHT31_GET_DATA_TIP": "从 SHT31 传感器获取所选数据",
  "BKY_SHT31_HEATER": "🌡️ SHT31 加热器 %1",
  "BKY_SHT31_HEAT_ON": "开",
  "BKY_SHT31_HEAT_OFF": "关",
  "BKY_SHT31_HEATER_TIP": "控制 SHT31 传感器的加热器",
  "BKY_SHT31_HEAT_STATUS": "🌡️ SHT31 加热器运行中",
  "BKY_SHT31_HEAT_STATUS_TIP": "检查 SHT31 传感器的加热器是否在运行",
  "BKY_SHT31_RESET": "🌡️ SHT31 重置 %1",
  "BKY_SHT31_SOFT": "软重置",
  "BKY_SHT31_HARD": "硬重置",
  "BKY_SHT31_RESET_TIP": "重置 SHT31 传感器",
  "BKY_SHT31_ERROR": "🌡️ SHT31 错误代码",
  "BKY_SHT31_ERROR_TIP": "获取 SHT31 传感器的最后一个错误代码",
  "BKY_COLOR_SENSOR_SETUP": "🎨 颜色传感器(TCS34725)设置",
  "BKY_COLOR_SENSOR_SETUP_TIP": "设置颜色传感器并初始化通信",
  "BKY_COLOR_SENSOR_INIT": "🎨 颜色传感器初始化",
  "BKY_COLOR_SENSOR_INIT_TIP": "初始化颜色传感器并激活颜色检测",
  "BKY_COLOR_SENSOR_TRIGGER": "🎨 颜色传感器颜色检测 %1",
  "BKY_COLOR_SENSOR_RAW": "原始颜色",
  "BKY_COLOR_SENSOR_ADJUST": "调整后的颜色",
  "BKY_COLOR_SENSOR_TRIGGER_TIP": "检测颜色并计算 RGB/HSV 数据",
  "BKY_COLOR_SENSOR_GET_DATA": "🎨 颜色传感器 %1",
  "BKY_COLOR_SENSOR_RED": "红色 (0~255)",
  "BKY_COLOR_SENSOR_GREEN": "绿色 (0~255)",
  "BKY_COLOR_SENSOR_BLUE": "蓝色 (0~255)",
  "BKY_COLOR_SENSOR_HUE": "色相 (0~360)",
  "BKY_COLOR_SENSOR_SATURATION": "饱和度 (0~1)",
  "BKY_COLOR_SENSOR_VALUE": "明度 (0~1)",
  "BKY_COLOR_SENSOR_GET_DATA_TIP": "从颜色传感器获取所选颜色数据",
  "BKY_COLOR_SENSOR_IS_COLOR": "🎨 颜色传感器的颜色是 %1 吗？",
  "BKY_COLOR_SENSOR_COLOR_RED": "红色",
  "BKY_COLOR_SENSOR_COLOR_GREEN": "绿色",
  "BKY_COLOR_SENSOR_COLOR_BLUE": "蓝色",
  "BKY_COLOR_SENSOR_COLOR_YELLOW": "黄色",
  "BKY_COLOR_SENSOR_COLOR_CYAN": "青色",
  "BKY_COLOR_SENSOR_COLOR_MAGENTA": "品红色",
  "BKY_COLOR_SENSOR_IS_COLOR_TIP": "检查检测到的颜色是否与所选颜色匹配",
  "BKY_MLX90614_SETUP": "🌡设置 MLX90614 温度传感器 I2C 地址 %1",
  "BKY_MLX90614_SETUP_TIP": "使用 I2C 地址初始化 MLX90614 非接触式温度传感器。",
  "BKY_MLX90614_READ_TEMP": "🌡读取 %1 的温度，单位为 %2",
  "BKY_MLX90614_READ_TEMP_TIP": "以摄氏度或华氏度读取物体或环境温度。",
  "BKY_MLX90614_OBJECT": "物体",
  "BKY_MLX90614_AMBIENT": "环境",
  "BKY_MLX90614_CELSIUS": "摄氏度 (°C)",
  "BKY_MLX90614_FAHRENHEIT": "华氏度 (°F)",
  "BKY_APDS9960_SETUP": "👋 手势传感器(APDS9960)设置",
  "BKY_APDS9960_SETUP_TIP": "初始化 APDS9960 手势/接近/光线传感器",
  "BKY_APDS9960_SENSOR_CONTROL": "👋 APDS9960 %1 传感器 %2 中断 %3",
  "BKY_APDS9960_LIGHT": "光线",
  "BKY_APDS9960_PROXIMITY": "接近",
  "BKY_APDS9960_GESTURE": "手势",
  "BKY_APDS9960_ENABLE": "启用",
  "BKY_APDS9960_DISABLE": "禁用",
  "BKY_APDS9960_INT_ON": "使用",
  "BKY_APDS9960_INT_OFF": "不使用",
  "BKY_APDS9960_SENSOR_CONTROL_TIP": "控制 APDS9960 的特定传感器",
  "BKY_APDS9960_READ_LIGHT": "👋 APDS9960 %1 光线",
  "BKY_APDS9960_AMBIENT": "环境光",
  "BKY_APDS9960_RED": "红色",
  "BKY_APDS9960_GREEN": "绿色",
  "BKY_APDS9960_BLUE": "蓝色",
  "BKY_APDS9960_READ_LIGHT_TIP": "从 APDS9960 读取所选的光线数据",
  "BKY_APDS9960_READ_PROXIMITY": "👋 APDS9960 接近传感器值",
  "BKY_APDS9960_READ_PROXIMITY_TIP": "读取 APDS9960 接近传感器值 (0-255)",
  "BKY_APDS9960_GESTURE_AVAILABLE": "👋 APDS9960 检测到手势",
  "BKY_APDS9960_GESTURE_AVAILABLE_TIP": "检查是否有可读取的手势",
  "BKY_APDS9960_GESTURE_CONTROL": "👋 APDS9960 手势 %1 %2",
  "BKY_APDS9960_READ_ANY": "读取",
  "BKY_APDS9960_CHECK_SPECIFIC": "检查",
  "BKY_APDS9960_GESTURE_LEFT": "左",
  "BKY_APDS9960_GESTURE_RIGHT": "右",
  "BKY_APDS9960_GESTURE_UP": "上",
  "BKY_APDS9960_GESTURE_DOWN": "下",
  "BKY_APDS9960_GESTURE_NEAR": "近",
  "BKY_APDS9960_GESTURE_FAR": "远",
  "BKY_APDS9960_GESTURE_CONTROL_TIP": "读取手势或检查特定手势",
  "BKY_MAX30105_SETUP_BASIC": "❤️设置心率传感器",
  "BKY_MAX30105_SETUP_BASIC_TIP": "设置传感器以测量心率和血氧",
  "BKY_MAX30105_GET_HEARTRATE": "❤️获取心率 (BPM)",
  "BKY_MAX30105_GET_HEARTRATE_TIP": "获取每分钟心跳次数",
  "BKY_MAX30105_GET_SPO2": "❤️获取血氧 (%)",
  "BKY_MAX30105_GET_SPO2_TIP": "获取血氧饱和度百分比",
  "BKY_MAX30105_FINGER_DETECTED": "❤️检测到手指",
  "BKY_MAX30105_FINGER_DETECTED_TIP": "检查手指是否放在传感器上",
  "BKY_MAX30105_BEAT_DETECTED": "❤️检测到心跳",
  "BKY_MAX30105_BEAT_DETECTED_TIP": "当检测到新的心跳时返回 true",
  "BKY_MAX30105_SENSOR_READY": "❤️传感器就绪",
  "BKY_MAX30105_SENSOR_READY_TIP": "检查传感器是否有足够的数据进行测量",
  "BKY_MAX30105_GET_TEMP": "❤️获取传感器温度 (°C)",
  "BKY_MAX30105_GET_TEMP_TIP": "以摄氏度获取传感器温度",
  "BKY_MAX30105_SETUP_ADVANCED": "❤️设置传感器（高级）用于 %1，功率为 %2",
  "BKY_MAX30105_SETUP_ADVANCED_TIP": "为经验丰富的用户提供的高级传感器设置",
  "BKY_MAX30105_GET_RED_RAW": "❤️获取红色 LED 原始值",
  "BKY_MAX30105_GET_RED_RAW_TIP": "获取红色 LED 传感器原始值（高级）",
  "BKY_MAX30105_GET_IR_RAW": "❤️获取红外 LED 原始值",
  "BKY_MAX30105_GET_IR_RAW_TIP": "获取红外 LED 传感器原始值（高级）",
  "BKY_MAX30105_MODE_HEARTRATE": "心率",
  "BKY_MAX30105_MODE_OXYGEN": "血氧",
  "BKY_MAX30105_MODE_PROXIMITY": "手指检测",
  "BKY_MAX30105_POWER_LOW": "低",
  "BKY_MAX30105_POWER_MEDIUM": "中",
  "BKY_MAX30105_POWER_HIGH": "高",
  "BKY_SI7021_SETUP": "🌡️Si7021 温湿度传感器设置",
  "BKY_SI7021_SETUP_TOOLTIP": "使用 I2C 初始化 Adafruit Si7021 温湿度传感器。",
  "BKY_SI7021_READ": "🌡️Si7021 读取值: %1",
  "BKY_SI7021_TEMP": "温度(℃)",
  "BKY_SI7021_HUMIDITY": "湿度(%)",
  "BKY_SI7021_READ_TOOLTIP": "从 Si7021 传感器读取温度或湿度值。",
  "BKY_SI7021_RESET": "🌡️Si7021 传感器重置",
  "BKY_SI7021_RESET_TOOLTIP": "重置 Si7021 传感器。",
  "BKY_SI7021_SERIAL": "🌡️Si7021 序列号读取: %1",
  "BKY_SERIAL_A": "序列号 A",
  "BKY_SERIAL_B": "序列号 B",
  "BKY_SI7021_SERIAL_TOOLTIP": "读取 Si7021 传感器的序列号。",
  "BKY_DCMOTOR_SETUP": "⚙️ 直流电机(L9110) %1: A 引脚 %2 B 引脚 %3 设置",
  "BKY_DCMOTOR_SETUP_TOOLTIP": "将直流电机设置到特定引脚。此块包含 DCmotor.h 库。",
  "BKY_DCMOTOR_RUN": "⚙️ 直流电机 %1: 速度 %2, 方向 %3 运行",
  "BKY_DCMOTOR_CLOCKWISE": "顺时针",
  "BKY_DCMOTOR_COUNTERCLOCKWISE": "逆时针",
  "BKY_DCMOTOR_RUN_TOOLTIP": "以指定的速度（0~255）和方向旋转直流电机。",
  "BKY_DCMOTOR_STOP": "⚙️ 直流电机 %1: 停止",
  "BKY_DCMOTOR_STOP_TOOLTIP": "停止直流电机。",
  "BKY_ACCELSTEPPER_SETUP": "🔄 步进电机(A4988) 驱动器(%1) %2: DIR 引脚 %3, Step 引脚 %4 设置",
  "BKY_ACCELSTEPPER_DRIVER": "驱动器(2引脚)",
  "BKY_ACCELSTEPPER_FULL2WIRE": "2线全步",
  "BKY_ACCELSTEPPER_FULL4WIRE": "4线全步",
  "BKY_ACCELSTEPPER_HALF4WIRE": "4线半步",
  "BKY_ACCELSTEPPER_SETUP_TIP": "初始化步进电机并设置驱动器类型和引脚",
  "BKY_ACCELSTEPPER_SETTINGS": "🔄 步进电机 %1: 最大速度 %2, 加速度因子 %3, 速度设置 %4, 步长设置 %5",
  "BKY_ACCELSTEPPER_SETTINGS_TIP": "设置步进电机的速度、加速度和步长设置",
  "BKY_ACCELSTEPPER_MOVE": "🔄 步进电机 %1: %2 %3",
  "BKY_ACCELSTEPPER_MOVE_TO": "移动到绝对位置",
  "BKY_ACCELSTEPPER_MOVE_REL": "移动到相对位置",
  "BKY_ACCELSTEPPER_SET_POS": "设置当前位置",
  "BKY_ACCELSTEPPER_MOVE_TIP": "设置或移动步进电机的位置",
  "BKY_ACCELSTEPPER_CONTROL": "🔄 步进电机 %1: %2",
  "BKY_ACCELSTEPPER_RUN": "运行",
  "BKY_ACCELSTEPPER_RUN_SPEED": "以速度运行",
  "BKY_ACCELSTEPPER_RUN_TO_POS": "运行到位置",
  "BKY_ACCELSTEPPER_STOP": "停止",
  "BKY_ACCELSTEPPER_ENABLE": "启用输出",
  "BKY_ACCELSTEPPER_DISABLE": "禁用输出",
  "BKY_ACCELSTEPPER_CONTROL_TIP": "控制步进电机",
  "BKY_ACCELSTEPPER_STATUS": "🔄 步进电机 %1: %2",
  "BKY_ACCELSTEPPER_CURRENT_POS": "当前位置",
  "BKY_ACCELSTEPPER_TARGET_POS": "目标位置",
  "BKY_ACCELSTEPPER_DISTANCE": "剩余距离",
  "BKY_ACCELSTEPPER_IS_RUNNING": "正在运行",
  "BKY_ACCELSTEPPER_SPEED": "当前速度",
  "BKY_ACCELSTEPPER_STATUS_TIP": "检查步进电机的状态",
  "BKY_STEPPERMULTI_SETUP": "⚡ 步进电机(%1 & %2) %3",
  "BKY_STEPPERMULTI_28BYJ": "28BYJ-48",
  "BKY_STEPPERMULTI_ULN2003": "ULN2003",
  "BKY_STEPPERMULTI_CUSTOM": "自定义",
  "BKY_STEPPERMULTI_4PIN": "4引脚连接",
  "BKY_STEPPERMULTI_2PIN": "2引脚连接",
  "BKY_STEPPERMULTI_SETUP_PINS": "引脚: IN1 %1 IN2 %2 IN3 %3 IN4 %4",
  "BKY_STEPPERMULTI_SETUP_TIP": "设置 StepperMulti 电机（28BYJ-48 为 2048 步/转）",
  "BKY_STEPPERMULTI_SPEED": "⚡ 步进电机: 编号 %1 转速 %2 RPM",
  "BKY_STEPPERMULTI_SPEED_TIP": "以 RPM 为单位设置步进电机转速",
  "BKY_STEPPERMULTI_MOVE": "⚡ 步进电机 %1: 设置为 %2 %3",
  "BKY_STEPPERMULTI_STEP": "步",
  "BKY_STEPPERMULTI_ANGLE": "角度",
  "BKY_STEPPERMULTI_MOVE_TIP": "设置步进电机移动指定的步数或度数",
  "BKY_STEPPERMULTI_RUN": "⚡ 步进电机 %1: 移动",
  "BKY_STEPPERMULTI_RUN_TIP": "实际移动步进电机（必须在循环中连续调用）",
  "BKY_PWMSERVO_SETUP": "🦾设置 PWM 舵机驱动器(pca9685) %1 I2C 地址 %2 PWM 频率 %3 赫兹",
  "BKY_PWMSERVO_SETUP_TIP": "使用 I2C 连接设置 16 通道 PWM 舵机驱动器。",
  "BKY_PWMSERVO_SERVO_ANGLE": "🦾舵机驱动器 %1 通道 %2 设置角度 %3 度",
  "BKY_PWMSERVO_SERVO_ANGLE_TIP": "控制舵机角度（0-180 度）。",
  "BKY_PWMSERVO_SERVO_MICROSECONDS": "🦾舵机驱动器 %1 通道 %2 设置脉冲 %3 微秒",
  "BKY_PWMSERVO_SERVO_MICROSECONDS_TIP": "使用精确的脉冲宽度控制舵机（500-2500 微秒）。",
  "BKY_PWMSERVO_PWM_OUTPUT": "🦾舵机驱动器 %1 通道 %2 PWM 值 %3 (0-4095)",
  "BKY_PWMSERVO_PWM_OUTPUT_TIP": "设置用于 LED 或电机控制的 PWM 输出值（0-4095）。",
  "BKY_PWMSERVO_PWM_ADVANCED": "🦾舵机驱动器 %1 通道 %2 PWM 开 %3 关 %4",
  "BKY_PWMSERVO_PWM_ADVANCED_TIP": "具有开/关时序的高级 PWM 控制（0-4095）。",
  "BKY_PWMSERVO_POWER": "🦾舵机驱动器 %1 %2",
  "BKY_PWMSERVO_POWER_WAKEUP": "唤醒",
  "BKY_PWMSERVO_POWER_SLEEP": "睡眠",
  "BKY_PWMSERVO_POWER_RESET": "重置",
  "BKY_PWMSERVO_POWER_TIP": "控制舵机驱动器的电源管理。",
  "BKY_PWMSERVO_MULTI_SERVO": "🦾舵机驱动器 %1 设置多个舵机 Ch1 %2° Ch2 %3° Ch3 %4° Ch4 %5°",
  "BKY_PWMSERVO_MULTI_SERVO_TIP": "同时控制多个舵机。",
  "BKY_PWMSERVO_LED_BRIGHTNESS": "🦾舵机驱动器 %1 通道 %2 LED 亮度 %3 %",
  "BKY_PWMSERVO_LED_BRIGHTNESS_TIP": "使用 PWM 控制 LED 亮度（0-100%）。",
  "BKY_BUZZER_TONE_SETUP": "🎵 蜂鸣器设置",
  "BKY_BUZZER_TONE_SETUP_TOOLTIP": "初始化蜂鸣器库并准备播放所需的功能。仅在 setup() 中放置一次。",
  "BKY_BUZZER_PLAY_NOTE": "🎵 蜂鸣器: 数字引脚 %1 播放 %2 音符，持续 %3 拍",
  "BKY_NOTE_C4": "C(C4)",
  "BKY_NOTE_CS4": "C#(C#4)",
  "BKY_NOTE_D4": "D(D4)",
  "BKY_NOTE_DS4": "D#(D#4)",
  "BKY_NOTE_E4": "E(E4)",
  "BKY_NOTE_F4": "F(F4)",
  "BKY_NOTE_FS4": "F#(F#4)",
  "BKY_NOTE_G4": "G(G4)",
  "BKY_NOTE_GS4": "G#(G#4)",
  "BKY_NOTE_A4": "A(A4)",
  "BKY_NOTE_AS4": "A#(A#4)",
  "BKY_NOTE_B4": "B(B4)",
  "BKY_NOTE_C5": "高音 C(C5)",
  "BKY_NOTE_REST": "(休止符)",
  "BKY_BEAT_WHOLE": "全音符 (4)",
  "BKY_BEAT_DOTTED_HALF": "附点二分音符 (3)",
  "BKY_BEAT_HALF": "二分音符 (2)",
  "BKY_BEAT_DOTTED_QUARTER": "附点四分音符 (1.5)",
  "BKY_BEAT_QUARTER": "四分音符 (1)",
  "BKY_BEAT_EIGHTH": "八分音符 (0.5)",
  "BKY_BEAT_SIXTEENTH": "十六分音符 (0.25)",
  "BKY_BUZZER_PLAY_NOTE_TOOLTIP": "根据音阶和节拍使用连接的蜂鸣器播放声音。",
  "BKY_BUZZER_SET_TEMPO": "🎵 将播放速度(BPM)设置为 %1",
  "BKY_BUZZER_SET_TEMPO_TOOLTIP": "以每分钟节拍数 (BPM) 设置播放速度。默认值为 120。",
  "BKY_BUZZER_STOP": "🎵 蜂鸣器: 数字引脚 %1 停止声音",
  "BKY_BUZZER_STOP_TOOLTIP": "立即停止蜂鸣器的声音。",
  "BKY_MP3_SETUP": "🎧 MP3(KT403A) 设置 设备 %1 RX %2 TX %3 初始音量(0~30) %4",
  "BKY_MP3_DEV_SD": "SD 卡(0x02)",
  "BKY_MP3_DEV_UDISK": "U 盘(0x01)",
  "BKY_MP3_SETUP_TIP": "SoftwareSerial mp3 创建、设备选择、音量初始化",
  "BKY_MP3_PLAY_INDEX": "🎧 MP3 曲目编号播放 %1",
  "BKY_MP3_PLAY_INDEX_TIP": "SpecifyMusicPlay(索引)",
  "BKY_MP3_PLAY_FOLDER": "🎧 MP3 文件夹/文件播放 文件夹 %1 文件 %2",
  "BKY_MP3_PLAY_FOLDER_TIP": "SpecifyfolderPlay(文件夹, 文件)",
  "BKY_MP3_SET_VOLUME": "🎧 MP3 音量设置(0~30) %1",
  "BKY_MP3_SET_VOLUME_TIP": "SetVolume(音量)",
  "BKY_MP3_CONTROL": "🎧 MP3 控制 %1",
  "BKY_MP3_NEXT": "下一曲",
  "BKY_MP3_PREV": "上一曲",
  "BKY_MP3_PAUSE": "暂停",
  "BKY_MP3_RESUME": "继续",
  "BKY_MP3_LOOP_ALL": "全部循环",
  "BKY_MP3_VOL_UP": "音量↑",
  "BKY_MP3_VOL_DOWN": "音量↓",
  "BKY_MP3_PRINT_RET": "返回数据输出",
  "BKY_MP3_CONTROL_TIP": "PlayNext/Previous, PlayPause/Resume, PlayLoop, Increase/DecreaseVolume, printReturnedData",
  "BKY_MP3_QUERY_STATUS": "🎧 MP3 状态值 (0=播放完成)",
  "BKY_MP3_QUERY_STATUS_TIP": "QueryPlayStatus(): 0 表示播放完成",
  "BKY_SD_SETUP": "💾设置 SD 卡编号 %1 CS %2 MOSI %3 MISO %4 SCK %5",
  "BKY_SD_SETUP_TIP": "使用指定的 SPI 引脚初始化 SD 卡。",
  "BKY_SD_OPEN_FILE": "💾打开文件 %1 文件名 %2 模式 %3",
  "BKY_SD_OPEN_FILE_TIP": "打开文件进行读写。",
  "BKY_SD_WRITE_FILE": "💾写入文件 %1 数据 %2",
  "BKY_SD_WRITE_FILE_TIP": "将数据写入已打开的文件。",
  "BKY_SD_READ_FILE": "💾从文件 %1 读取",
  "BKY_SD_READ_FILE_TIP": "从已打开的文件中读取数据。",
  "BKY_SD_FILE_EXISTS": "💾文件 %1 是否存在 文件名 %2",
  "BKY_SD_FILE_EXISTS_TIP": "检查文件是否存在于 SD 卡上。",
  "BKY_SD_FILE_SIZE": "💾文件大小 %1",
  "BKY_SD_FILE_SIZE_TIP": "以字节为单位获取已打开文件的大小。",
  "BKY_SD_CLOSE_FILE": "💾关闭文件 %1",
  "BKY_SD_CLOSE_FILE_TIP": "关闭已打开的文件。",
  "BKY_SD_REMOVE_FILE": "💾删除文件 %1 文件名 %2",
  "BKY_SD_REMOVE_FILE_TIP": "从 SD 卡中删除文件。",
  "BKY_SD_MAKE_DIRECTORY": "💾创建目录 %1 路径 %2",
  "BKY_SD_MAKE_DIRECTORY_TIP": "在 SD 卡上创建目录。",
  "BKY_SD_FILE_AVAILABLE": "💾可用字节数 %1",
  "BKY_SD_FILE_AVAILABLE_TIP": "获取可供读取的字节数。",
  "BKY_SD_MODE_READ": "读取",
  "BKY_SD_MODE_WRITE": "写入",
  "BKY_IR_SETUP": "📱 红外遥控接收器设置 引脚 %1",
  "BKY_IR_SETUP_TIP": "设置红外遥控接收器",
  "BKY_IR_AVAILABLE": "📱 红外遥控信号可用吗？",
  "BKY_IR_AVAILABLE_TIP": "检查是否接收到红外遥控信号",
  "BKY_IR_READ_BUTTON": "📱 红外遥控按钮编号",
  "BKY_IR_READ_BUTTON_TIP": "返回按下的红外遥控按钮编号（0-9，10:CH-，11:CH，12:CH+，20-22:播放按钮，30-32:音量按钮）",
  "BKY_IR_READ_RAW": "📱 红外遥控原始代码值",
  "BKY_IR_READ_RAW_TIP": "返回红外遥控的原始代码值（供高级用户使用）",
  "BKY_IR_BUTTON_IS": "📱 红外遥控按钮是 %1 吗？",
  "BKY_IR_BTN_0": "0",
  "BKY_IR_BTN_1": "1",
  "BKY_IR_BTN_2": "2",
  "BKY_IR_BTN_3": "3",
  "BKY_IR_BTN_4": "4",
  "BKY_IR_BTN_5": "5",
  "BKY_IR_BTN_6": "6",
  "BKY_IR_BTN_7": "7",
  "BKY_IR_BTN_8": "8",
  "BKY_IR_BTN_9": "9",
  "BKY_IR_BTN_CH_DOWN": "CH-",
  "BKY_IR_BTN_CH": "CH",
  "BKY_IR_BTN_CH_UP": "CH+",
  "BKY_IR_BTN_PREV": "上一个",
  "BKY_IR_BTN_NEXT": "下一个",
  "BKY_IR_BTN_PLAY": "播放",
  "BKY_IR_BTN_VOL_DOWN": "音量-",
  "BKY_IR_BTN_VOL_UP": "音量+",
  "BKY_IR_BUTTON_IS_TIP": "检查是否按下了红外遥控器上的特定按钮",
  "BKY_RF433_SETUP": "📡 RF433MHz 无线电通信 发送/接收",
  "BKY_RF433_SETUP_TIP": "初始化 RF433MHz 无线通信库",
  "BKY_RF433_CONFIG": "📡 RF433MHz 发送引脚 %1, %2 数据发送",
  "BKY_RF433_CONFIG_TIP": "设置 RF433MHz 发送引脚并发送消息",
  "BKY_RF433_RX_SETUP": "📡 RF433MHz 接收引脚 %1 传输速度 %2 设置",
  "BKY_RF433_RX_SETUP_TIP": "设置 RF433MHz 接收引脚和传输速度",
  "BKY_RF433_RX_START": "📡 RF433MHz 1.准备将接收到的数据存储在缓冲区中",
  "BKY_RF433_RX_START_TIP": "启动 RF433MHz 接收器以准备接收数据",
  "BKY_RF433_HAVE_MESSAGE": "📡 RF433MHz 2.是否有可用的接收数据？",
  "BKY_RF433_HAVE_MESSAGE_TIP": "检查是否有可用的接收消息",
  "BKY_RF433_GET_MESSAGE": "📡 RF433MHz 3.将接收到的数据存储在缓冲区中",
  "BKY_RF433_GET_MESSAGE_TIP": "将接收到的消息存储在缓冲区中",
  "BKY_RF433_READ_DATA": "📡 RF433MHz: 读取接收到的数据",
  "BKY_RF433_READ_DATA_TIP": "读取存储在缓冲区中的接收数据",
  "BKY_GPS_SETUP_TGPS": "📶 GPS 设置 串口 %1 波特率 %2",
  "BKY_GPS_SETUP_TGPS2": "↳ (选择软件串口时) RX 引脚 %1 TX 引脚 %2",
  "BKY_GPS_SETUP_TGPS_TIP": "TinyGPS++ 初始化并启动所选串口",
  "BKY_GPS_UPDATE": "📶 GPS 更新 (串口接收 → 解析器)",
  "BKY_GPS_UPDATE_TIP": "将接收到的 NMEA 字符传递给 gps.encode()",
  "BKY_GPS_READ": "📶 GPS 读取值 %1",
  "BKY_GPS_LAT": "纬度",
  "BKY_GPS_LNG": "经度",
  "BKY_GPS_SPEED": "速度(公里/小时)",
  "BKY_GPS_ALT": "高度(米)",
  "BKY_GPS_COURSE": "航向(度)",
  "BKY_GPS_SATS": "卫星数量",
  "BKY_GPS_HDOP": "HDOP",
  "BKY_GPS_YEAR": "年",
  "BKY_GPS_MONTH": "月",
  "BKY_GPS_DAY": "日",
  "BKY_GPS_HOUR": "时",
  "BKY_GPS_MIN": "分",
  "BKY_GPS_SEC": "秒",
  "BKY_GPS_READ_TIP": "从 TinyGPS++ 成员返回所需值",
  "BKY_GPS_HAS_FIX": "📶 GPS 是否已定位 (FIX)?",
  "BKY_GPS_HAS_FIX_TIP": "gps.location.isValid() → 1/0",
  "BKY_GPS_BETWEEN": "📶 两坐标计算 | 计算类型 %1 | 纬度1 %2 经度1 %3 纬度2 %4 经度2 %5",
  "BKY_GPS_DIST_M": "距离(米)",
  "BKY_GPS_COURSE_DEG": "方位(度)",
  "BKY_GPS_BETWEEN_TIP": "distanceBetween()/courseTo() 计算",
  "BKY_GPS_CARDINAL": "📶 方位 (16方位) | 角度 %1",
  "BKY_GPS_CARDINAL_TIP": "cardinal(度) → N, NE, E ...",
  "BKY_UTIL_SERIAL_BEGIN": "1. 串口通信设置 (速度: %1)",
  "BKY_UTIL_SERIAL_BEGIN_TOOLTIP": "启动硬件串口通信。",
  "BKY_UTIL_SERIAL_AVAILABLE_CHECK": "2. 如果串口通信可用",
  "BKY_UTIL_SERIAL_AVAILABLE_CHECK_TOOLTIP": "检查通过串口接收的数据是否可用。",
  "BKY_UTIL_SERIAL_READ": "3. %1 读取",
  "BKY_SERIAL_READ_BYTE": "字节",
  "BKY_SERIAL_READ_STRING": "字符串",
  "BKY_SERIAL_READ_STRING_UNTIL": "读取直到换行符",
  "BKY_UTIL_SERIAL_READ_TOOLTIP": "从串口读取数据。字节：一个字节，字符串：整个字符串，直到换行符：读取直到 \\n",
  "BKY_UTIL_SERIAL_PRINT": "4. Serial. %1 %2 值输出",
  "BKY_SERIAL_PRINTLN": "println",
  "BKY_SERIAL_PRINT": "print",
  "BKY_UTIL_SERIAL_PRINT_TOOLTIP": "向串口监视器输出数据。",
  "BKY_UTIL_BT_SETUP": "1. 蓝牙: Tx %1, Rx %2 速度 %3 设置",
  "BKY_UTIL_BT_SETUP_TOOLTIP": "使用软件串口设置蓝牙通信。",
  "BKY_UTIL_BT_AVAILABLE": "2. 蓝牙: 如果有接收数据",
  "BKY_UTIL_BT_AVAILABLE_TOOLTIP": "检查通过蓝牙接收的数据是否可用。",
  "BKY_UTIL_BT_READ": "3. %1 读取",
  "BKY_UTIL_BT_READ_TOOLTIP": "从蓝牙读取数据。字节：一个字节，字符串：整个字符串，直到换行符：读取直到 \\n",
  "BKY_UTIL_BT_READ_BUFFER": "3. 字节读取 (缓冲区, 长度 %1)",
  "BKY_UTIL_BT_READ_BUFFER_TOOLTIP": "从缓冲区读取指定长度的数据。",
  "BKY_UTIL_BT_PRINT": "4. 蓝牙: %1 %2 数据输出",
  "BKY_UTIL_BT_PRINT_TOOLTIP": "通过蓝牙发送数据。",
  "BKY_UTIL_MILLIS": "millis() 调用",
  "BKY_UTIL_MILLIS_TOOLTIP": "返回自程序启动以来经过的时间，单位为毫秒。",
  "BKY_UTIL_MAP": "∞ 将变量 %1 从 %2, %3 映射到 %4, %5",
  "BKY_UTIL_MAP_TOOLTIP": "按比例将数字从一个范围转换到另一个范围。",
  "BKY_UTIL_CONSTRAIN": "∞ 将变量 %1 限制在 %2 和 %3 之间",
  "BKY_UTIL_CONSTRAIN_TOOLTIP": "限制数值范围。",
  "BKY_UTIL_CONVERT": "∞ 将 %1 转换为 %2",
  "BKY_INT": "整数",
  "BKY_FLOAT": "浮点数",
  "BKY_STRING": "字符串",
  "BKY_UTIL_CONVERT_TOOLTIP": "将值转换为不同的数据类型。",
  "BKY_UTIL_TO_CHAR": "∞ ASCII %1 转为字符",
  "BKY_UTIL_TO_CHAR_TOOLTIP": "返回与 ASCII 数字代码对应的字符。",
  "BKY_UTIL_TO_ASCII": "∞ %1 转为 ASCII 代码",
  "BKY_UTIL_TO_ASCII_TOOLTIP": "返回与字符对应的 ASCII 数字代码。",
  "BKY_UTIL_I2C_SCANNER": "I2C 地址扫描器",
  "BKY_UTIL_I2C_SCANNER_TOOLTIP": "将连接的 I2C 设备的地址扫描到串口监视器。",
  "BKY_UTIL_I2C_READ_ADDRESS": "I2C 地址",
  "BKY_UTIL_I2C_READ_ADDRESS_TOOLTIP": "以字符串形式获取 I2C 扫描结果地址。",
  "BKY_SERIAL_PARSE_DATA": "按 %1 分隔符解析接收到的数据",
  "BKY_SERIAL_PARSE_DATA_TOOLTIP": "按特定分隔符切割并解析接收到的字符串。",
  "BKY_SERIAL_GET_PARSED_VALUE": "第 %1 个解析值",
  "BKY_SERIAL_GET_PARSED_VALUE_TOOLTIP": "按索引获取解析的数据片段。",
  "BKY_SERIAL_GET_PARSED_COUNT": "解析值的数量",
  "BKY_SERIAL_GET_PARSED_COUNT_TOOLTIP": "返回解析的数据片段总数。",
  "BKY_SERIAL_CONVERT_TO_NUMBER": "将 %1 转换为数字",
  "BKY_SERIAL_CONVERT_TO_NUMBER_TOOLTIP": "将字符串转换为数字（浮点数）。",
  "BKY_SERIAL_GET_RAW_DATA": "接收到的原始数据",
  "BKY_SERIAL_GET_RAW_DATA_TOOLTIP": "返回整个接收到的原始字符串。",
  "BKY_SERIAL_CLEAR_BUFFER": "清除存储的数据",
  "BKY_SERIAL_CLEAR_BUFFER_TOOLTIP": "清除内部接收缓冲区。",
  "BKY_DEVELOPER_INFO_BLOCK": "👨‍💻 开发者: Kim Seok-jeon | 联系方式: alphaco@kakao.com_右键单击",
  "BKY_DEVELOPER_INFO_BLOCK_TOOLTIP": "右键单击此块并选择“帮助”以访问开发者网站。",
  "BKY_CUSTOM_AD_BLOCK": "🚀 MCU(Arduino, Ma:bit, ESP32, Pico) 使用指南, BRIXEL 简介_右键单击",
  "BKY_CUSTOM_AD_BLOCK_TOOLTIP": "右键单击此块并选择“帮助”以访问网站。",
  "BKY_GO_TO_AI_ROBOT_SCRATCH": "🤖 前往 AI*ROBOT Scratch_右键单击",
  "BKY_GO_TO_AI_ROBOT_SCRATCH_TOOLTIP": "右键单击块并选择“帮助”以在 AI*ROBOT Scratch 中使用 AI 控制硬件。",
  "BKY_GO_TO_K12_PROJECTHUB": "🤖 前往 K12_ProjectHub_右键单击",
  "BKY_GO_TO_K12_PROJECTHUB_TOOLTIP": "右键单击块并选择“帮助”以在 k12-projecthub 中探索各种示例。",
  "BKY_MAIN_FLAG": "提供基本的 Arduino 编程结构。",
  "BKY_MAIN_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_PIN_FLAG": "提供 Arduino 的所有引脚相关控制。",
  "BKY_PIN_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_CONTROL_FLAG": "提供 Arduino 的条件和循环结构。",
  "BKY_CONTROL_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_LOGIC_FLAG": "提供逻辑表达式。",
  "BKY_LOGIC_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_MATH_FLAG": "提供数学符号和函数。",
  "BKY_MATH_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_TEXT_FLAG": "提供字符串处理。",
  "BKY_TEXT_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_COLOUR_FLAG": "提供颜色选择和组合。",
  "BKY_COLOUR_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_VAR_FLAG": "允许创建数值变量和字符串变量。",
  "BKY_VAR_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_FUNC_FLAG": "允许创建用户自定义函数。",
  "BKY_FUNC_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_DIS01_FLAG": "提供显示输出设备的控制块。",
  "BKY_DIS01_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_DIS02_FLAG": "提供高级显示输出设备的控制块。",
  "BKY_DIS02_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_SENSOR01_FLAG": "提供通用传感器控制块。",
  "BKY_SENSOR01_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_SENSOR02_FLAG": "提供高级 I2C 传感器控制块。",
  "BKY_SENSOR02_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_MOTOR_FLAG": "提供电机控制块。",
  "BKY_MOTOR_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_OUTPUT_FLAG": "提供输出设备控制块。",
  "BKY_OUTPUT_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_COMM_FLAG": "提供通信设备的控制块。",
  "BKY_COMM_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",
  "BKY_UTIL_FLAG": "提供各种用于编程的实用控制块。",
  "BKY_UTIL_FLAG_TOOLTIP": "右键单击此块并选择“帮助”以获取使用指南。",

  "sectionTitleConnection": "🔗 PC代理连接",
  "connectionStatusConnected": "✅ 已连接到PC代理",
  "connectionStatusDisconnected": "❌ 未连接到PC代理",
  "portDisabledMessage": "* 连接到PC代理后可用",
  "BKY_CATEGORY_LIST": "🗂️ 列表",
  "BKY_ARRAY_CREATE": "📚 创建数组 %1 类型 %2 值为 %3",
  "BKY_ARRAY_CREATE_TIP": "创建一个带初始值的数组",
  "BKY_ARRAY_CREATE_EMPTY": "📚 创建空数组 %1 类型 %2 大小 %3",
  "BKY_ARRAY_CREATE_EMPTY_TIP": "创建一个指定大小的空数组",
  "BKY_ARRAY_GET": "📚 获取数组 %1 索引 %2 的值",
  "BKY_ARRAY_GET_TIP": "从指定索引处获取数组的值",
  "BKY_ARRAY_SET": "📚 设置数组 %1 索引 %2 的值为 %3",
  "BKY_ARRAY_SET_TIP": "在指定索引处设置数组的值",
  "BKY_ARRAY_APPEND": "📚 将 %1 附加到数组 %2",
  "BKY_ARRAY_APPEND_TIP": "将值添加到数组的末尾",
  "BKY_ARRAY_REMOVE": "📚 从数组 %1 的索引 %2 处移除",
  "BKY_ARRAY_REMOVE_TIP": "从数组的指定索引处移除值并移动元素",
  "BKY_ARRAY_FIND": "📚 在数组 %2 中查找 %1",
  "BKY_ARRAY_FIND_TIP": "在数组中查找值并返回索引（如果未找到则为-1）",
  "BKY_ARRAY_LENGTH": "📚 数组 %1 的长度",
  "BKY_ARRAY_LENGTH_TIP": "获取数组的总大小",
  "BKY_ARRAY_CLEAR": "📚 用 %2 填充数组 %1",
  "BKY_ARRAY_CLEAR_TIP": "用指定的值填充整个数组",
  "BKY_ARRAY_COPY": "📚 从 %1 复制数组到 %2",
  "BKY_ARRAY_COPY_TIP": "将所有值从源数组复制到目标数组",
  "BKY_ARRAY_STRLEN": "📚 %1 的字符串长度",
  "BKY_ARRAY_STRLEN_TIP": "获取字符数组（字符串）的实际长度",
  "BKY_ARRAY_CONTAINS": "📚 数组 %1 是否包含 %2",
  "BKY_ARRAY_CONTAINS_TIP": "检查数组中是否存在该值",
  "BKY_ARRAY_TYPE_INT": "整数",
  "BKY_ARRAY_TYPE_FLOAT": "小数",
  "BKY_ARRAY_TYPE_CHAR": "字符",
  "BKY_OLED_HAN_SETUP": "🖥️设置 OLED(SSD1306) 显示 X0~12, Y0~6",
  "BKY_OLED_HAN_SETUP_TIP": "初始化支持韩文的OLED显示器。必须先使用。",
  "BKY_OLED_HAN_CLEAR": "🖥️清除 OLED 显示",
  "BKY_OLED_HAN_CLEAR_TIP": "清除OLED显示器上的所有内容。",
  "BKY_OLED_HAN_PRINT_TEXT": "🖥️在 X %2 Y %3 打印文本 %1 %4",
  "BKY_OLED_HAN_PRINT_TEXT_TIP": "在指定位置打印任何文本（韩文、英文、数字、混合）。",
  "BKY_OLED_HAN_BIG_DIGIT": "🖥️在 X %2 Y %3 显示大数字 %1 %4",
  "BKY_OLED_HAN_BIG_DIGIT_TIP": "以七段显示器样式显示一个大数字（0-9）。",
  "BKY_OLED_HAN_DRAW_BAR": "🖥️在 X %1 Y %2 绘制条形图，值为 %3",
  "BKY_OLED_HAN_DRAW_BAR_TIP": "绘制一个值为（0-128）的水平条形图。",
  "BKY_OLED_HAN_MODE_NORMAL": "正常",
  "BKY_OLED_HAN_MODE_INVERSE": "反相",
  "BKY_SH1106_SETUP": "🖥️设置 OLED(SH1106) 显示 X0~12, Y0~6",
  "BKY_SH1106_SETUP_TIP": "初始化SH1106 OLED显示器以输出韩文文本",
  "BKY_SH1106_CLEAR": "🖥️清除 OLED 显示",
  "BKY_SH1106_CLEAR_TIP": "清除OLED显示器上的所有内容",
  "BKY_SH1106_PRINT_TEXT": "🖥️在 X %2 Y %3 打印文本 %1 样式 %4",
  "BKY_SH1106_PRINT_TEXT_TIP": "在指定位置打印韩文或英文文本",
  "BKY_SH1106_LARGE_NUMBER": "🖥️在 X %2 Y %3 显示大数字 %1 样式 %4",
  "BKY_SH1106_LARGE_NUMBER_TIP": "显示大的点阵数字（0-9）或冒号（:）",
  "BKY_SH1106_DRAW_BAR": "🖥️在 X %1 Y %2 绘制条形图，值为 %3",
  "BKY_SH1106_DRAW_BAR_TIP": "绘制一个值为（0-128）的水平条形图",
  "BKY_SH1106_STYLE_NORMAL": "正常",
  "BKY_SH1106_STYLE_INVERSE": "反相",
  "BKY_CONTROLS_IF_ELSEIF_TITLE_ELSEIF": "添加 ELSEIF",
  "BKY_CONTROLS_IF_IF_TITLE_IF": "现有的 IF 语句",
  "BKY_CONTROLS_IF_ELSE_TITLE_ELSE": "添加 ELSE",
  "_comment": "PC 代理通信与实时日志消息 - 简体中文翻译",
  "agent_compile_start": "开始编译代码。",
  "agent_compile_mode": "当前模式：{modeName}",
  "agent_compile_no_code": "没有要编译的代码。",
  "agent_compile_no_connection": "❌ 无法连接到 PC 代理。请检查代理是否正在运行。",
  "agent_compile_success": "✅ 编译完成！大小：{size}",
  "agent_compile_fail": "❌ 编译失败：{errorMsg}",
  "agent_compile_request_fail": "❌ 编译请求失败：{errorMsg}",
  "agent_upload_need_compile": "上传前请先编译。",
  "agent_upload_request_sent": "📤 已发送上传请求。",
  "agent_upload_fail": "❌ 上传失败：{errorMsg}",
  "agent_upload_no_connection": "无法连接到 PC 代理。",
  "agent_upload_request_fail": "❌ 上传请求失败：{errorMsg}",
  "agent_port_request": "🔍 正在请求端口列表...",
  "agent_port_not_available": "⚠️ 无法获取端口列表。",
  "agent_port_request_fail": "端口列表请求失败。",
  "agent_port_list_updated": "端口列表已更新（{portCount} 个端口）",
  "websocket_connected": "🌐 已连接到 PC 代理。",
  "websocket_disconnected": "🔌 已与 PC 代理断开连接。",
  "websocket_error": "❌ PC 代理连接时发生错误。",
  "websocket_unavailable": "⚠️ 实时通信不可用。",
  "compile_progress": "🔄 编译进度：{message}",
  "upload_progress": "📤 上传进度：{message}",
  "agent_error": "❌ 错误：{message}",
  "agent_connected": "🔗 已连接到 PC 代理。",
  "agent_not_found": "⚠️ 未找到 PC 代理。请安装并运行代理。",
  "agent_connection_required": "❌ 无法连接到 PC 代理。请先运行代理。",
  "system_ready": "✅ 静态 Web Arduino IDE 初始化完成",
  "system_init_fail": "⚠️ 系统初始化失败。",
  "mode_switch_block": "已切换到积木编程模式。",
  "mode_switch_text": "已切换到文本编程模式。",
  "file_save_block": "{fileName} 积木文件已保存。",
  "file_save_sketch": "{fileName} 草稿码文件已保存。",
  "file_save_fail_block": "保存积木文件失败。",
  "file_save_fail_sketch": "保存草稿码文件失败。",
  "file_load_block": "{fileName} 积木文件已加载。",
  "file_load_sketch": "{fileName} 草稿码文件已加载。",
  "file_load_fail": "文件加载失败：{errorMsg}",
  "code_copy_no_content": "没有可复制的代码。",
  "code_copy_success": "代码已复制到剪贴板。",
  "code_copy_fail": "复制到剪贴板失败。",
  "project_export_success": "项目已导出：{fileName}",
  "project_export_fail": "项目导出失败。",
  "project_import_invalid": "请选择一个有效的项目文件（.json）。",
  "project_import_success": "项目已导入：{projectName}",
  "project_import_fail": "项目导入失败：{errorMsg}",
  "language_change_success": "语言已更改为 {lang}。",
  "language_change_fail": "语言更改失败：{errorMsg}",
  "agent_status_connected": "✅ 已连接到 PC 代理",
  "agent_status_disconnected": "⏳ 未连接到 PC 代理",
  "mode_block": "积木编程",
  "mode_text": "文本编程",
  "mode_switch_message": "已切换到 {modeName} 模式。",
  "loading_system_init": "正在初始化系统...",
  "connection_status_connected": "✅ 已连接到 PC 代理",
  "connection_status_disconnected": "⏳ 未连接到 PC 代理",
  "i18n_init_start": "开始 i18n 初始化",
  "i18n_basic_complete": "基本 i18n 初始化完成",
  "i18n_blockly_load_complete": "Blockly 官方翻译文件已加载",
  "i18n_blockly_load_fail": "加载 Blockly 官方翻译失败，使用默认值",
  "i18n_blockly_setlocale_complete": "Blockly.setLocale 应用成功",
  "i18n_custom_inject_complete": "自定义翻译消息已注入",
  "i18n_init_fail": "翻译系统初始化失败",
  "language_json_load_fail": "加载 {newLanguage}.json 失败",
  "monaco_ltr_reset_complete": "Monaco 编辑器 LTR 方向重置完成"
}