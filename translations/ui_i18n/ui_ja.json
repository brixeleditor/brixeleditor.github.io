{
  "mainTitle": "🚀 Arduino向けBrixel Web IDE",
  "blockModeBtn": "ブロックコーディング",
  "textModeBtn": "テキストコーディング",
  "compileBtn": "⚙️ コードをコンパイル",
  "uploadBtn": "📤 ボードにアップロード",
  "blocklyHeaderTitle": "🧩 ブロックコーディングエディタ",
  "codeTitle": "📄 リアルタイムArduino C++コード",
  "codeTitle_textMode": "📝 Arduino C++コードエディタ",
  "copyBtn": "📋 コピー",
  "codePreview_initial": "// ここにブロックを配置してコードを生成します。",
  "sectionTitleLanguage": "🌍 言語とファイル管理",
  "labelLanguage": "言語:",
  "langKo": "한국어",
  "langEn": "English",
  "langJa": "日本語",
  "langZh": "中文",
  "langEs": "Español",
  "languageStatus_official": "✓ 公式サポート",
  "languageStatus_browser": "🌍 ブラウザ翻訳",
  "labelFilename": "ファイル名:",
  "fileNameInput_placeholder": "arduino_project",
  "saveBtn": "💾 保存",
  "loadBtn": "📂 読み込み",
  "sectionTitleAgent": "🤖 PCエージェントコードを入力",
  "agentIdInput_placeholder": "PCエージェントペアリングコード",
  "sectionTitleBoard": "🎯 ボードを選択",
  "boardGroupArduino_label": "🔵 Arduinoファミリー",
  "boardUno": "Arduino Uno",
  "boardNano": "Arduino Nano",
  "boardMega": "Arduino Mega",
  "boardGroupEsp32_label": "🔴 ESP32ファミリー",
  "boardEsp32": "ESP32",
  "boardEsp32s2": "ESP32-S2",
  "boardEsp32c3": "ESP32-C3",
  "boardEsp32s3": "ESP32-S3",
  "boardGroupPico_label": "🟣 Raspberry Pi",
  "boardPico": "Raspberry Pi Pico",
  "boardPicow": "Raspberry Pi Pico W",
  "sectionTitlePort": "🔌 アップロードポート",
  "portAutoSelect": "ポートを更新してください",
  "refreshPortsBtn_title": "ポート一覧を更新",
  "sectionTitleDownload": "⬇️ エージェントをダウンロード",
  "agentOsWin": "Windows用",
  "agentOsMac": "macOS用",
  "agentOsLinux": "Linux用",
  "downloadAgentBtn_title": "エージェントをダウンロード",
  "consoleHeader": "📺 リアルタイムログ",
  "loadingText": "システムを初期化中...",
  "loadingText_en": "Initializing system...",
  "loadingText_ja": "システムを初期化中...",
  "loadingText_zh": "系统初始化中...",
  "loadingText_es": "Inicializando sistema...",
  "js_alert_downloadAgent": "{osName}用のArduinoエージェントをダウンロードしています。\n実際の環境では、OS用のインストーラーがダウンロードされます。",
  "js_log_downloadRequest": "{osName}のエージェントダウンロード要求",
  "js_log_modeSwitch": "モード切り替え: {modeName}",
  "js_log_modeBlock": "ブロックコーディング",
  "js_log_modeText": "テキストコーディング",
  "js_log_codeCopiedSuccess": "✅ コードをクリップボードにコピーしました。",
  "js_log_codeCopiedFail": "⚠ コードのコピーに失敗しました。",
  "js_log_blockFileSaved": "✅ ブロックファイルを保存しました: {fileName}",
  "js_log_blockFileSaveFail": "⚠ ブロックファイルの保存に失敗しました。",
  "js_log_sketchFileSaved": "✅ スケッチファイルを保存しました: {fileName}",
  "js_log_sketchFileSaveFail": "⚠ スケッチファイルの保存に失敗しました。",
  "js_log_blockFileLoaded": "✅ ブロックファイルを読み込みました: {fileName}",
  "js_log_sketchFileLoaded": "✅ スケッチファイルを読み込みました: {fileName}",
  "js_log_fileLoadFail": "⚠ ファイルの読み込みに失敗しました: {errorMsg}",
  "js_log_compileStart": "---",
  "js_log_compileStart_mode": "コンパイルを開始します ({modeName}モード)",
  "js_log_noCodeToCompile": "⚠ コンパイルするコードがありません。",
  "js_log_compileComplete": "✅ コンパイル完了 - サイズ: {size}",
  "js_log_compileFail": "⚠ コンパイルに失敗しました: {errorMsg}",
  "js_log_compileRequestFail": "⚠ コンパイル要求に失敗しました: {errorMsg}",
  "js_log_uploadPreCompile": "⚠ 先にコードをコンパイルしてください。",
  "js_log_uploadNoAgentId": "⚠ エージェントIDを入力してください。",
  "js_log_uploadRequestSent": "📤 アップロード要求を送信しました...",
  "js_log_uploadRequestFail": "⚠ アップロード要求に失敗しました: {errorMsg}",
  "js_log_requestingPorts": "🔍 エージェント({agentId})からポートリストを要求しています...",
  "js_log_portListUpdated": "✅ ポートリストを更新しました。({portCount}個のポートが見つかりました)",
  "js_log_serverConnected": "🔗 サーバーに接続しました。",
  "js_log_serverError": "⚠ サーバー接続エラー。",
  "js_log_langChanged": "言語を{lang}に変更しました。",
  "js_log_langChangeFail": "言語の変更に失敗しました: {errorMsg}",
  "js_log_initFail": "⚠ システムの初期化に失敗しました。",
  "template_arduino": "void setup() {\n  pinMode(13, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  digitalWrite(13, HIGH);\n  delay(500);\n  digitalWrite(13, LOW);\n  delay(500);\n}",
  "template_esp32": "void setup() {\n  pinMode(2, OUTPUT); // 内蔵LED\n  Serial.begin(115200);\n  Serial.println(\"ESP32 start!\");\n}\n\nvoid loop() {\n  digitalWrite(2, HIGH);\n  delay(1000);\n  digitalWrite(2, LOW);\n  delay(1000);\n}",
  "template_pico": "void setup() {\n  pinMode(LED_BUILTIN, OUTPUT);\n  Serial.begin(115200);\n  Serial.println(\"Raspberry Pi Pico start!\");\n}\n\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(500);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(500);\n}",
  "ARDUINO_SETUP": "Arduinoセットアップ",
  "ARDUINO_LOOP": "Arduinoループ",
  "ARDUINO_DIGITAL_WRITE": "デジタル書き込み %1 ピン %2",
  "ARDUINO_DIGITAL_READ": "デジタル読み取り %1 ピン",
  "ARDUINO_ANALOG_WRITE": "アナログ書き込み %1 ピン %2",
  "ARDUINO_ANALOG_READ": "アナログ読み取り %1 ピン",
  "ARDUINO_DELAY": "遅延 %1 ms",
  "ARDUINO_SERIAL_BEGIN": "シリアル通信開始 %1 ボー",
  "ARDUINO_SERIAL_PRINT": "シリアルに %1 を出力",
  "SENSOR_ULTRASONIC": "超音波センサー距離",
  "SENSOR_TEMPERATURE": "温度センサー値",
  "SENSOR_LIGHT": "光センサー値",
  "SENSOR_BUTTON": "ボタン %1 ピンの状態",
  "ACTUATOR_LED": "LED %1 ピン %2",
  "ACTUATOR_SERVO": "サーボ %1 ピンを %2 度に回転",
  "ACTUATOR_BUZZER": "ブザー %1 ピンで音 %2",
  "ACTUATOR_MOTOR": "モーター %1 ピンの速度 %2",
  "PIN_HIGH": "HIGH",
  "PIN_LOW": "LOW",
  "PIN_NUMBER": "ピン番号",
  "PIN_VALUE": "値",
  "MILLISECONDS": "ミリ秒",
  "BKY_PAGE_TITLE": "MCUブロックコーディングWebエディタ",
  "BKY_ARDUINO_REALTIME_CODE": "リアルタイムArduino C++コード",
  "BKY_COPY_BUTTON": "コピー",
  "BKY_LANGUAGE_LABEL": "言語:",
  "BKY_SAVE_BUTTON": "保存",
  "BKY_LOAD_BUTTON": "読み込み",
  "BKY_FILE_NAME_PLACEHOLDER": "ファイル名",
  "BKY_ALERT_SAVE_FAILED": "ブロックの保存に失敗しました",
  "BKY_ALERT_LOAD_FAILED": "無効なブロックファイル、またはファイルが破損しています",
  "BKY_CATEGORY_MAIN": "🎯 メイン",
  "BKY_CATEGORY_PIN_CONTROL": "📌 ピン制御",
  "BKY_CATEGORY_CONTROL": "🔄 制御",
  "BKY_CATEGORY_LOGIC": "🔧 論理",
  "BKY_CATEGORY_MATH": "🔢 計算",
  "BKY_CATEGORY_TEXT": "📜 テキスト",
  "BKY_CATEGORY_COLOR": "🎨 色",
  "BKY_CATEGORY_VARIABLES": "📦 変数",
  "BKY_CATEGORY_FUNCTIONS": "⚡ 関数",
  "BKY_CATEGORY_DISPLAY_A": "💻 A.ディスプレイ",
  "BKY_CATEGORY_DISPLAY_B": "🖥️ B.高度なディスプレイ",
  "BKY_CATEGORY_SENSORS_A": "🌡️ A.一般センサー",
  "BKY_CATEGORY_SENSORS_B": "🛰️ B.高度なセンサー",
  "BKY_CATEGORY_MOTOR": "⚙️ モーター",
  "BKY_CATEGORY_OUTPUT": "💡 出力デバイス",
  "BKY_CATEGORY_COMM": "📶 通信",
  "BKY_CATEGORY_SERIAL": "📡 シリアル通信",
  "BKY_CATEGORY_UTIL": "🛠️ ユーティリティ",
  "BKY_CATEGORY_GUIDE": "📢 ガイド",
  "BKY_ARDUINO_STARTS_UP": "MCUボードが起動したとき！",
  "BKY_ARDUINO_STARTS_UP_TOOLTIP": "プログラム開始時に必要なライブラリをインクルードします。",
  "BKY_ARDUINO_SETUP": "🚀 セットアップ_setup()",
  "BKY_ARDUINO_SETUP_TOOLTIP": "Arduinoが最初に起動するときに一度だけ実行されるコードを配置します。",
  "BKY_ARDUINO_LOOP": "♾️ 連続ループ_loop()",
  "BKY_ARDUINO_LOOP_TOOLTIP": "ループ内で継続的に実行されるコードを配置します。",
  "BKY_PIN_MODE": "ピン %1 を %2 に設定",
  "BKY_INPUT": "入力(INPUT)",
  "BKY_OUTPUT": "出力(OUTPUT)",
  "BKY_PIN_MODE_TOOLTIP": "ピンモードをINPUTまたはOUTPUTに設定します。",
  "BKY_READ_DIGITAL_PIN": "デジタルピン %1 を読み取る",
  "BKY_READ_DIGITAL_PIN_TOOLTIP": "デジタルピンの状態（HIGH/LOW）を読み取ります。",
  "BKY_SET_DIGITAL_PIN": "デジタルピン %1 に %2 を出力",
  "BKY_HIGH": "High",
  "BKY_LOW": "Low",
  "BKY_SET_DIGITAL_PIN_TOOLTIP": "デジタルピンにHIGHまたはLOWを出力します。",
  "BKY_READ_ANALOG_PIN": "アナログピン A%1 を読み取る",
  "BKY_READ_ANALOG_PIN_TOOLTIP": "アナログピンの値（0-1023）を読み取ります。",
  "BKY_SET_PWM_PIN": "PWMピン %1 に %2 を出力",
  "BKY_SET_PWM_PIN_TOOLTIP": "PWMピンに0-255の値を出力します。",
  "BKY_SERVO_SETUP": "サーボモーターピン %1 のセットアップ",
  "BKY_SERVO_SETUP_TOOLTIP": "サーボモーター用にピンを設定します。",
  "BKY_SET_SERVO_ANGLE": "サーボモーターピン %1 の角度を %2 度に出力",
  "BKY_SET_SERVO_ANGLE_TOOLTIP": "サーボモーターの角度を0-180度に設定します。このブロックは自動的にサーボライブラリをインクルードします。",
  "BKY_TONE_OUT": "ピン %1 から %2 Hz の音を %3 ms再生",
  "BKY_TONE_OUT_TOOLTIP": "指定したピンから特定の周波数の音を再生します。",
  "BKY_NO_TONE": "ピン %1 の音を停止",
  "BKY_NO_TONE_TOOLTIP": "tone()で再生された音を停止します。",
  "BKY_DELAY_MS": "%1 秒待機",
  "BKY_DELAY_MS_TOOLTIP": "指定された時間（秒）待機します。",
  "BKY_TIMER_MILLIS": "現在の時間 (millis)",
  "BKY_TIMER_MILLIS_TOOLTIP": "Arduino起動からの経過時間を1/1000秒単位で返します。",
  "BKY_TIMER_RESET": "⏰ タイマー %1 をリセット",
  "BKY_TIMER_RESET_TOOLTIP": "指定された番号のノンブロッキングタイマーをリセットします。",
  "BKY_TIMER_NON_BLOCKING_DELAY": "⏰ %1 ミリ秒ごとに実行",
  "BKY_TIMER_NON_BLOCKING_DELAY_TOOLTIP": "delay()を使用せずに、一定間隔でコードを実行します。",
  "BKY_ARDUINO_INTERRUPT": "⚡️ 外部割り込みピン %1 が %2 のとき即時実行",
  "BKY_INTERRUPT_RISING": "立ち上がり (Low→High)",
  "BKY_INTERRUPT_FALLING": "立ち下がり (High→Low)",
  "BKY_INTERRUPT_CHANGE": "変化 (状態変化)",
  "BKY_ARDUINO_INTERRUPT_TOOLTIP": "⚠️ Arduino UNO: 2,3ピンのみ利用可能！割り込み関数内でdelay()、Serialを使用しないでください。できるだけ短く、速く記述してください。",
  "BKY_PULSE_IN": "ピン %1 からの %2 パルス長を読み取る (タイムアウト %3 μs)",
  "BKY_PULSE_IN_TOOLTIP": "ピンのパルス長をマイクロ秒単位で測定します。",
  "BKY_SHIFT_OUT": "🔄 シフトレジスタ データピン %1 クロックピン %2 ラッチピン %3",
  "BKY_SHIFT_OUT_VALUE": "値 %2 を %1 の順で出力",
  "BKY_SHIFT_MSB_FIRST": "MSBファースト (7→0bit)",
  "BKY_SHIFT_LSB_FIRST": "LSBファースト (0→7bit)",
  "BKY_SHIFT_OUT_TOOLTIP": "シフトレジスタにデータを送信します（例: 74HC595）。",
  "BKY_WAIT_UNTIL": "%1 がTrueになるまで待機",
  "BKY_WAIT_UNTIL_TOOLTIP": "条件が真になるまで待機します。",
  "BKY_CUSTOM_TEXT_JOIN": "文字列 %1 と %2 を結合",
  "BKY_CUSTOM_TEXT_JOIN_TOOLTIP": "2つのテキストを1つに結合します。",
  "BKY_CUSTOM_TEXT_CHAR_AT": "文字列 %1 の %2 番目の文字",
  "BKY_CUSTOM_TEXT_CHAR_AT_TOOLTIP": "文字列内の特定の位置にある1文字を取得します。",
  "BKY_CUSTOM_TEXT_LENGTH": "文字列 %1 の長さ",
  "BKY_CUSTOM_TEXT_LENGTH_TOOLTIP": "文字列の総文字数を返します。",
  "BKY_CUSTOM_TEXT_CONTAINS": "%1 に %2 が含まれているか？",
  "BKY_CUSTOM_TEXT_CONTAINS_TOOLTIP": "ある文字列が別の文字列を含んでいるか確認します。",
  "BKY_COLOUR_PICKER": "色 %1",
  "BKY_COLOUR_PICKER_TOOLTIP": "色を選択します。",
  "BKY_COLOUR_RANDOM": "ランダムな色",
  "BKY_COLOUR_RANDOM_TOOLTIP": "ランダムな色を生成します。",
  "BKY_COLOUR_RGB": "RGBカラー 赤 %1 緑 %2 青 %3",
  "BKY_COLOUR_RGB_TOOLTIP": "赤、緑、青の値（0-255）で色を作成します。",
  "BKY_COLOUR_BLEND": "色 %1 と %2 を %3 の比率で混合",
  "BKY_COLOUR_BLEND_TOOLTIP": "2つの色を指定された比率（0.0-1.0）で混合します。",
  "BKY_COLOUR_TO_HEX": "色 %1 をHEXコードに",
  "BKY_COLOUR_TO_HEX_TOOLTIP": "色を16進数カラーコード（#RRGGBB）に変換します。",
  "BKY_COLOUR_TO_RGB_VALUES": "色 %1 の %2 の値",
  "BKY_RED": "赤",
  "BKY_GREEN": "緑",
  "BKY_BLUE": "青",
  "BKY_COLOUR_TO_RGB_VALUES_TOOLTIP": "色から赤、緑、青の値（0-255）のいずれかを抽出します。",
  "BKY_NUMBER_VARIABLE_SET": "🔢 数値変数 %1 に %2 を格納",
  "BKY_NUMBER_VARIABLE_SET_TOOLTIP": "数値（float）型変数に値を格納します。デジタル読み取り（HIGH/LOW）も格納できます。",
  "BKY_NUMBER_VARIABLE_GET": "🔢 数値変数 %1",
  "BKY_NUMBER_VARIABLE_GET_TOOLTIP": "数値（float）型変数の値を取得します。",
  "BKY_STRING_VARIABLE_SET": "📝 文字列変数 %1 に %2 を格納",
  "BKY_STRING_VARIABLE_SET_TOOLTIP": "String型変数に値を格納します。",
  "BKY_STRING_VARIABLE_GET": "📝 文字列変数 %1",
  "BKY_STRING_VARIABLE_GET_TOOLTIP": "String型変数の値を取得します。",
  "BKY_PROCEDURES_IFRETURN": "🔄 もし %1 ならば %2 を返す",
  "BKY_PROCEDURES_IFRETURN_TOOLTIP": "条件が真の場合に指定された値を返します。戻り値のある関数内でのみ使用してください。",
  "BKY_PROCEDURES_IFRETURN_VOID": "🔄 もし %1 ならば関数を終了",
  "BKY_PROCEDURES_IFRETURN_VOID_TOOLTIP": "条件が真の場合に関数を終了します。戻り値のない関数で使用してください。",
  "BKY_LCD_I2C_SETUP": "📺 LCD(1602) I2C %1 セットアップ (アドレス: %2 サイズ: %3 x %4)",
  "BKY_LCD_I2C_SETUP_TOOLTIP": "I2C LCDを設定します。通常、アドレスは0x27または0x3Fです。",
  "BKY_LCD_I2C_PRINT": "📺 LCD %1: %2 行 %3 列に %4 を表示",
  "BKY_LCD_I2C_PRINT_TOOLTIP": "指定された位置にテキストを出力します。（行/列は0から始まります）",
  "BKY_LCD_I2C_CLEAR": "📺 LCD %1: 画面をクリア",
  "BKY_LCD_I2C_CLEAR_TOOLTIP": "LCD画面全体をクリアします。",
  "BKY_LCD_I2C_CURSOR": "📺 LCD %1: カーソル %2",
  "BKY_ON": "ON",
  "BKY_OFF": "OFF",
  "BKY_BLINK": "点滅",
  "BKY_NO_BLINK": "点滅なし",
  "BKY_LCD_I2C_CURSOR_TOOLTIP": "カーソルの表示を制御します。",
  "BKY_LCD_I2C_BACKLIGHT": "📺 LCD %1: バックライト %2",
  "BKY_LCD_I2C_BACKLIGHT_TOOLTIP": "LCDバックライトを制御します。",
  "BKY_LCD_I2C_SCROLL": "📺 LCD %1: 画面スクロール %2",
  "BKY_LEFT": "左",
  "BKY_RIGHT": "右",
  "BKY_LCD_I2C_SCROLL_TOOLTIP": "画面の内容を左または右にスクロールします。",
  "BKY_LCD_I2C_DISPLAY": "📺 LCD %1: 画面表示 %2",
  "BKY_LCD_I2C_DISPLAY_TOOLTIP": "LCD画面の表示をオンまたはオフにします。",
  "BKY_LCD_I2C_SET_CURSOR": "📺 LCD %1: カーソルを %2 行 %3 列に移動",
  "BKY_LCD_I2C_SET_CURSOR_TOOLTIP": "カーソルを指定された位置に移動します。（行/列は0から始まります）",

  "BKY_TM1637_SETUP": "🔟FND(TM1637) セットアップ CLKピン %1 DATAピン %2",
  "BKY_TM1637_SETUP_TIP": "CLKとDATAピンでTM1637 4桁ディスプレイを初期化します",
  "BKY_TM1637_DISPLAY_NUMBER": "🔟数字を表示 %1 %2 %3",
  "BKY_TM1637_DISPLAY_NUMBER_TIP": "小数点またはコロンをオプションで付けて数字を表示します",
  "BKY_TM1637_DISPLAY_TIME": "🔟時刻を表示 %1 : %2 %3",
  "BKY_TM1637_DISPLAY_TIME_TIP": "HH:MM形式で時刻を表示します",
  "BKY_TM1637_DISPLAY_TEXT": "🔟テキストを表示 %1 スクロール遅延 %2 ms",
  "BKY_TM1637_DISPLAY_TEXT_TIP": "4文字を超える場合はスクロールしてテキストを表示します",
  "BKY_TM1637_DISPLAY_DIGIT": "🔟位置 %1 に桁 %2 を表示",
  "BKY_TM1637_DISPLAY_DIGIT_TIP": "指定した位置に1桁または文字を表示します",
  "BKY_TM1637_CLEAR": "🔟ディスプレイをクリア",
  "BKY_TM1637_CLEAR_TIP": "ディスプレイ上のすべての桁を消去します",
  "BKY_TM1637_BRIGHTNESS": "🔟明るさを設定 %1",
  "BKY_TM1637_BRIGHTNESS_TIP": "ディスプレイの明るさを0（最も暗い）から7（最も明るい）まで設定します",
  "BKY_TM1637_COLON_CONTROL": "🔟コロン %1",
  "BKY_TM1637_COLON_CONTROL_TIP": "桁の間のコロンを表示または非表示にします",
  "BKY_TM1637_NO_DECIMAL": "小数なし",
  "BKY_TM1637_ONE_DECIMAL": "小数点1桁",
  "BKY_TM1637_COLON": "コロン付き (:)",
  "BKY_TM1637_SHOW_MINUS": "マイナスを表示",
  "BKY_TM1637_HIDE_MINUS": "マイナスを非表示",
  "BKY_TM1637_COLON_ON": "表示",
  "BKY_TM1637_COLON_OFF": "非表示",
  "BKY_TM1637_POSITION_1": "1番目（左）",
  "BKY_TM1637_POSITION_2": "2番目",
  "BKY_TM1637_POSITION_3": "3番目",
  "BKY_TM1637_POSITION_4": "4番目（右）",

  "BKY_NEO_SETUP_T": "⭕NeoPixel(WS2812/B) セットアップ",
  "BKY_NEO_SETUP_L1": "番号: %1 | デジタルピン: %2 | LED数: %3",
  "BKY_NEO_SETUP_L2": "タイプ: %1",
  "BKY_NEO_TYPE_GRB": "GRB(標準WS2812B)",
  "BKY_NEO_TYPE_RGB": "RGB",
  "BKY_NEO_TYPE_BRG": "BRG",
  "BKY_NEO_TYPE_BGR": "BGR",
  "BKY_NEO_TYPE_GRBW": "GRBW(RGBW)",
  "BKY_NEO_TYPE_RGBW": "RGBW",
  "BKY_NEO_SETUP_TIP": "NeoPixelオブジェクトを作成し、begin/clear/showで初期化します。（このブロックでは#includeのみ作成）",
  "BKY_NEO_SET_RGB": "⭕NeoPixel RGB設定 | STRIP %1 | LED %2 | R %3 | G %4 | B %5",
  "BKY_NEO_SET_RGB_TIP": "1つのLEDのRGBカラーを設定します。show()するまで反映されません。",
  "BKY_NEO_SET_RGBW": "⭕NeoPixel RGBW設定 | STRIP %1 | LED %2 | R %3 | G %4 | B %5 | W %6",
  "BKY_NEO_SET_RGBW_TIP": "RGBWタイプのストリップの1つのLEDの色を設定します。",
  "BKY_NEO_BRI": "⭕NeoPixel 明るさ | STRIP %1 | 値(0～255) %2",
  "BKY_NEO_BRI_TIP": "全体の明るさを設定します (setBrightness)。",
  "BKY_NEO_SHOW": "⭕NeoPixel 表示 | STRIP %1",
  "BKY_NEO_SHOW_TIP": "バッファに設定された色を実際のLEDに反映させます。",
  "BKY_NEO_CLEAR": "⭕NeoPixel 全クリア (clear) | STRIP %1",
  "BKY_NEO_CLEAR_TIP": "すべてのLEDを消灯します（バッファのみ変更）。必要なときにshow()を呼び出してください。",
  "BKY_NEO_FILL_ALL": "⭕NeoPixel 全てを色で埋める | STRIP %1 | R %2 | G %3 | B %4",
  "BKY_NEO_FILL_ALL_TIP": "すべてのピクセルを同じRGBで埋めます。show()で反映させてください。",
  "BKY_NEO_ANIM_RAINBOW": "⭕NeoPixel レインボー | STRIP %1 | 遅延(ms) %2 | 繰り返し %3",
  "BKY_NEO_ANIM_RAINBOW_TIP": "虹色が流れるエフェクト（ブロッキング）。",
  "BKY_NEO_ANIM_SHIFT": "⭕NeoPixel シフト | STRIP %1 | 方向 %2 | ステップ %3 | 遅延(ms) %4",
  "BKY_NEO_DIR_L": "左",
  "BKY_NEO_DIR_R": "右",
  "BKY_NEO_ANIM_SHIFT_TIP": "ピクセルを円形に左右に移動させます（ブロッキング）。",
  "BKY_NEO_ANIM_BREATHE": "⭕NeoPixel ブリージング | STRIP %1 | R %2 | G %3 | B %4",
  "BKY_NEO_ANIM_BREATHE_L2": "最小輝度 %1 | 最大輝度 %2 | 増分 %3 | 遅延(ms) %4",
  "BKY_NEO_ANIM_BREATHE_TIP": "明るさが徐々に増減する呼吸エフェクト（ブロッキング）。",
  "BKY_SH110X_SETUP_I2C": "📺SH110X OLED %1 セットアップ タイプ %2 I2Cアドレス %3 リセットピン %4 幅 %5 高さ %6",
  "BKY_SH110X_SETUP_I2C_TIP": "I2C接続でSH110X OLEDディスプレイをセットアップします。",
  "BKY_SH110X_DISPLAY": "📺OLED %1 表示",
  "BKY_SH110X_DISPLAY_TIP": "現在のバッファをOLEDディスプレイに表示します。",
  "BKY_SH110X_CLEAR": "📺OLED %1 クリア",
  "BKY_SH110X_CLEAR_TIP": "OLEDディスプレイバッファをクリアします。",
  "BKY_SH110X_CONTROL": "📺OLED %1 %2",
  "BKY_SH110X_CONTROL_TIP": "OLEDディスプレイの状態を制御します。",
  "BKY_SH110X_PIXEL": "📺OLED %1 ピクセル描画 X %2 Y %3 色 %4",
  "BKY_SH110X_PIXEL_TIP": "OLEDディスプレイにピクセルを描画します。",
  "BKY_SH110X_LINE": "📺OLED %1 線描画 X1 %2 Y1 %3 から X2 %4 Y2 %5 色 %6",
  "BKY_SH110X_LINE_TIP": "OLEDディスプレイに線を描画します。",
  "BKY_SH110X_RECT": "📺OLED %1 矩形描画 X %2 Y %3 幅 %4 高さ %5 %6 色 %7",
  "BKY_SH110X_RECT_TIP": "OLEDディスプレイに矩形を描画します。",
  "BKY_SH110X_CIRCLE": "📺OLED %1 円描画 X %2 Y %3 半径 %4 %5 色 %6",
  "BKY_SH110X_CIRCLE_TIP": "OLEDディスプレイに円を描画します。",
  "BKY_SH110X_TEXT": "📺OLED %1 テキスト表示 %2 X %3 Y %4 サイズ %5 色 %6 折り返し %7",
  "BKY_SH110X_TEXT_TIP": "OLEDディスプレイにテキストを表示します。",
  "BKY_SH110X_CONTRAST": "📺OLED %1 コントラスト設定 %2",
  "BKY_SH110X_CONTRAST_TIP": "OLEDディスプレイのコントラストを設定します(0-255)。",
  "BKY_SH110X_ACTION_INVERT": "表示反転",
  "BKY_SH110X_ACTION_NORMAL": "通常表示",
  "BKY_SH110X_ACTION_ON": "電源オン",
  "BKY_SH110X_ACTION_OFF": "電源オフ",
  "BKY_SH110X_COLOR_WHITE": "白",
  "BKY_SH110X_COLOR_BLACK": "黒",
  "BKY_SH110X_COLOR_INVERSE": "反転",
  "BKY_SH110X_FILL_OUTLINE": "枠線",
  "BKY_SH110X_FILL_FILLED": "塗りつぶし",
  "BKY_SH110X_WRAP_NO": "折り返しなし",
  "BKY_SH110X_WRAP_YES": "折り返しあり",
  "BKY_HT16_SETUP": "📲I2Cドットマトリクス(HT16K33)セットアップ",
  "BKY_HT16_SETUP_1": "番号 %1 | デバイス %2 | I2Cアドレス %3",
  "BKY_DM_8X8": "8×8",
  "BKY_DM_8X16": "8×16",
  "BKY_DM_8X16MINI": "8×16ミニ",
  "BKY_DM_BICOLOR8": "2色8×8",
  "BKY_HT16_SETUP_2": "明るさ(0～15) %1 | 点滅 %2 | 回転 %3",
  "BKY_BLINK_2HZ": "2 Hz",
  "BKY_BLINK_1HZ": "1 Hz",
  "BKY_BLINK_0_5HZ": "0.5 Hz",
  "BKY_HT16_SETUP_TIP": "必要なライブラリをインクルードし、begin/brightness/blink/rotationを設定します。（このブロックでは#includeのみ作成）",
  "BKY_HT16_BRI": "📲I2Cマトリクス %1 明るさ(0～15) %2",
  "BKY_HT16_BRI_TIP": "setBrightness()",
  "BKY_HT16_BLINK": "📲I2Cマトリクス %1 点滅 %2",
  "BKY_HT16_BLINK_TIP": "blinkRate()",
  "BKY_HT16_PIXEL": "📲I2Cマトリクス %1 | 行 %2 | 列 %3 | ピクセル %4",
  "BKY_HT16_PIXEL_TIP": "単色：1=ON、0=OFF。（行/列は1から始まります）",
  "BKY_HT16_BIPIX": "📲I2C 2色マトリクス %1 | 行 %2 | 列 %3 | 色 %4",
  "BKY_YELLOW": "黄色",
  "BKY_HT16_BIPIX_TIP": "2色マトリクス専用のdrawPixel(x,y,color)",
  "BKY_HT16_P8": "📲8×8マトリクス %1 | パターン",
  "BKY_HT16_P8_TIP": "クリックしてピクセルを切り替え、バッファに描画します。「表示」ブロックを使用して出力を反映させてください。",
  "BKY_HT16_P816": "📲8×16マトリクス %1 | パターン",
  "BKY_HT16_P816_TIP": "幅16×高さ8のグリッドで編集します（実際の8×16デバイス用）",
  "BKY_HT16_LINE": "📲I2Cマトリクス %1 | (行 %2, 列 %3) → (行 %4, 列 %5) 線を描画",
  "BKY_HT16_LINE_TIP": "Adafruit_GFX drawLine",
  "BKY_HT16_CIR": "📲I2Cマトリクス %1 | 中心(行 %2, 列 %3) | 半径 %4 | 円を描画",
  "BKY_HT16_CIR_TIP": "Adafruit_GFX drawCircle",
  "BKY_HT16_RECT": "📲I2Cマトリクス %1 | 開始(行 %2, 列 %3) | サイズ %4 × %5 | 矩形 %6",
  "BKY_HT16_RECT_TIP": "drawRect / fillRect",
  "BKY_HT16_SHOW": "📲I2Cマトリクス %1 | 表示",
  "BKY_HT16_SHOW_TIP": "writeDisplay()で反映します",
  "BKY_HT16_CLR": "📲I2Cマトリクス %1 | 画面をクリア",
  "BKY_HT16_CLR_TIP": "clear()のみ実行します",
  "BKY_HT16_SCROLL": "📲I2Cマトリクス %1 | テキスト %2 | スクロール %3 | 遅延(秒) %4",
  "BKY_HT16_SCROLL_TIP": "GFXテキストを左右にスクロール出力します",
  "BKY_SSD1306_SETUP_I2C": "💻SSD1306 OLED %1 セットアップ 幅 %2 高さ %3 I2Cアドレス %4 リセットピン %5",
  "BKY_SSD1306_SETUP_I2C_TIP": "I2C接続でSSD1306 OLEDディスプレイをセットアップします。",
  "BKY_SSD1306_CONTROL": "💻OLED %1 %2",
  "BKY_SSD1306_CONTROL_TIP": "OLEDディスプレイの基本機能を制御します。",
  "BKY_SSD1306_DIM": "💻OLED %1 調光 %2",
  "BKY_SSD1306_DIM_TIP": "OLEDディスプレイの調光モードを設定します。",
  "BKY_SSD1306_PIXEL": "💻OLED %1 ピクセル描画 X %2 Y %3 色 %4",
  "BKY_SSD1306_PIXEL_TIP": "OLEDディスプレイにピクセルを描画します。",
  "BKY_SSD1306_LINE": "💻OLED %1 線描画 X1 %2 Y1 %3 から X2 %4 Y2 %5 色 %6",
  "BKY_SSD1306_LINE_TIP": "OLEDディスプレイに線を描画します。",
  "BKY_SSD1306_RECT": "💻OLED %1 矩形描画 X %2 Y %3 幅 %4 高さ %5 %6 色 %7",
  "BKY_SSD1306_RECT_TIP": "OLEDディスプレイに矩形を描画します。",
  "BKY_SSD1306_CIRCLE": "💻OLED %1 円描画 X %2 Y %3 半径 %4 %5 色 %6",
  "BKY_SSD1306_CIRCLE_TIP": "OLEDディスプレイに円を描画します。",
  "BKY_SSD1306_TEXT": "💻OLED %1 テキスト表示 %2 X %3 Y %4 サイズ %5 色 %6 折り返し %7",
  "BKY_SSD1306_TEXT_TIP": "OLEDディスプレイにテキストを表示します。",
  "BKY_SSD1306_SCROLL": "💻OLED %1 スクロール %2 開始 %3 終了 %4",
  "BKY_SSD1306_SCROLL_TIP": "OLEDディスプレイのスクロール機能を制御します。",
  "BKY_SSD1306_ACTION_DISPLAY": "表示",
  "BKY_SSD1306_ACTION_CLEAR": "クリア",
  "BKY_SSD1306_ACTION_INVERT": "反転",
  "BKY_SSD1306_ACTION_NORMAL": "通常",
  "BKY_SSD1306_DIM_ON": "オン",
  "BKY_SSD1306_DIM_OFF": "オフ",
  "BKY_SSD1306_COLOR_WHITE": "白",
  "BKY_SSD1306_COLOR_BLACK": "黒",
  "BKY_SSD1306_COLOR_INVERSE": "反転",
  "BKY_SSD1306_FILL_OUTLINE": "枠線",
  "BKY_SSD1306_FILL_FILLED": "塗りつぶし",
  "BKY_SSD1306_WRAP_NO": "折り返しなし",
  "BKY_SSD1306_WRAP_YES": "折り返しあり",
  "BKY_SSD1306_SCROLL_RIGHT": "右",
  "BKY_SSD1306_SCROLL_LEFT": "左",
  "BKY_SSD1306_SCROLL_DIAG_RIGHT": "右斜め",
  "BKY_SSD1306_SCROLL_DIAG_LEFT": "左斜め",
  "BKY_SSD1306_SCROLL_STOP": "停止",
  "BKY_ULTRA_SETUP": "🔊 超音波センサーのセットアップ トリガーピン %1 エコーピン %2",
  "BKY_ULTRA_SETUP_TIP": "超音波センサーを設定します。トリガー/エコーピンを指定してください。",
  "BKY_ULTRA_DISTANCE": "🔊 超音波距離 単位 %1",
  "BKY_UNIT_CM": "cm",
  "BKY_UNIT_MM": "mm",
  "BKY_ULTRA_DISTANCE_TIP": "超音波センサーで距離を測定します。",
  "BKY_DHT_SETUP": "🌡️ 温湿度センサー(DHT00): ピン %1 タイプ %2 セットアップ",
  "BKY_DHT_SETUP_TOOLTIP": "DHT温湿度センサーを設定します。",
  "BKY_DHT_READ_TEMPERATURE": "🌡️ DHTセンサー: ピン %1 温度を読み取る %2",
  "BKY_TEMP_CELSIUS": "摂氏 (°C)",
  "BKY_TEMP_FAHRENHEIT": "華氏 (°F)",
  "BKY_DHT_READ_TEMPERATURE_TOOLTIP": "DHTセンサーから温度を読み取ります。",
  "BKY_DHT_READ_HUMIDITY": "🌡️ DHTセンサー: ピン %1 湿度を読み取る",
  "BKY_DHT_READ_HUMIDITY_TOOLTIP": "DHTセンサーから湿度を読み取ります。",
  "BKY_DHT_CONVERT_TEMPERATURE": "🌡️ 温度変換: %1 %2 → %3",
  "BKY_DHT_CONVERT_TEMPERATURE_TOOLTIP": "摂氏と華氏の間で温度を変換します。",
  "BKY_DHT_HEAT_INDEX": "🌡️ 体感温度計算: 温度 %1 湿度 %2% 単位 %3",
  "BKY_DHT_HEAT_INDEX_TOOLTIP": "温度と湿度を使用して体感温度を計算します。",
  "BKY_DALLAS_SETUP": "💦 水温センサーのセットアップ ピン %1",
  "BKY_DALLAS_SETUP_TIP": "水温センサーを設定します。データピン番号を指定してください。",
  "BKY_DALLAS_READ": "💦 水温センサー %1 読み取り 単位 %2",
  "BKY_DALLAS_READ_TIP": "選択したセンサーの温度を読み取ります。（インデックスは0から始まります）",
  "BKY_DALLAS_COUNT": "💦 接続されている水温センサーの数",
  "BKY_DALLAS_COUNT_TIP": "接続されている水温センサーの数を返します。",
  "BKY_DALLAS_REQUEST": "💦 すべての水温センサーの測定を開始",
  "BKY_DALLAS_REQUEST_TIP": "すべての水温センサーの温度変換を開始します。",
  "BKY_HX711_SETUP": "⚖️ 重量センサー(HX711): DOUTピン %1 CLKピン %2 ゲイン %3 セットアップ",
  "BKY_GAIN_128_A": "128 (チャンネル A)",
  "BKY_GAIN_64_A": "64 (チャンネル A)",
  "BKY_GAIN_32_B": "32 (チャンネル B)",
  "BKY_HX711_SETUP_TOOLTIP": "HX711重量センサーを設定します。",
  "BKY_HX711_GET_WEIGHT": "⚖️ HX711重量センサー 重量測定",
  "BKY_HX711_GET_WEIGHT_TOOLTIP": "HX711センサーで重量を測定します。",
  "BKY_HX711_TARE": "⚖️ HX711重量センサー ゼロ点調整 %1 回",
  "BKY_HX711_TARE_TOOLTIP": "現在の重量を0に設定します。",
  "BKY_HX711_SET_SCALE": "⚖️ HX711重量センサー スケール設定 %1",
  "BKY_HX711_SET_SCALE_TOOLTIP": "重量計算のためのスケール値を設定します。",
  "BKY_HX711_IS_READY": "⚖️ HX711重量センサー 準備完了状態チェック",
  "BKY_HX711_IS_READY_TOOLTIP": "センサーがデータを読み取る準備ができているか確認します。",
  "BKY_HX711_POWER_CONTROL": "⚖️ HX711重量センサー 電源 %1",
  "BKY_POWER_ON": "オン",
  "BKY_POWER_OFF": "オフ",
  "BKY_HX711_POWER_CONTROL_TOOLTIP": "センサーの電源を制御します。",
  "BKY_HX711_READ_DATA": "⚖️ HX711重量センサー データ読み取り %1",
  "BKY_RAW_VALUE": "生の値",
  "BKY_AVERAGE_VALUE": "平均値",
  "BKY_ACTUAL_VALUE": "実際の値",
  "BKY_HX711_READ_DATA_TOOLTIP": "センサーからさまざまな種類のデータを読み取ります。",
  "BKY_I2C_WEIGHT_SETUP": "I2C重量センサーセットアップ アドレス %1",
  "BKY_I2C_WEIGHT_SETUP_TIP": "スレーブアドレスでI2C重量センサーを初期化します。",
  "BKY_I2C_WEIGHT_READ": "I2Cセンサーから重量を読み取る",
  "BKY_I2C_WEIGHT_READ_TIP": "I2C重量センサーから重量値を読み取ります。",
  "BKY_I2C_WEIGHT_AVAILABLE": "I2C重量センサーが利用可能です",
  "BKY_I2C_WEIGHT_AVAILABLE_TIP": "I2C重量センサーが接続され、応答しているか確認します。",
  "BKY_I2C_WEIGHT_RAW_DATA": "I2Cセンサーから生データバイト %1 を読み取る",
  "BKY_I2C_WEIGHT_RAW_DATA_TIP": "I2C重量センサーから生のバイトデータを読み取ります。",
  "BKY_I2C_WEIGHT_BYTE_0": "バイト0（ステータス）",
  "BKY_I2C_WEIGHT_BYTE_1": "バイト1（上位）",
  "BKY_I2C_WEIGHT_BYTE_2": "バイト2（下位）",
  "BKY_ROTARY_SETUP": "🔄 ロータリーエンコーダ: DTピン %1 CLKピン %2 セットアップ",
  "BKY_ROTARY_SETUP_TOOLTIP": "ロータリーエンコーダを設定します。",
  "BKY_ROTARY_GET_VALUE": "🔄 ロータリーエンコーダ 回転値",
  "BKY_ROTARY_GET_VALUE_TOOLTIP": "ロータリーエンコーダの回転値を読み取ります。（1:時計回り, -1:反時計回り, 0:変化なし）",
  "BKY_ROTARY_DIRECTION": "🔄 ロータリーエンコーダ 回転方向",
  "BKY_ROTARY_DIRECTION_TOOLTIP": "ロータリーエンコーダの回転方向を文字列で返します。",
  "BKY_ROTARY_COUNTER": "🔄 ロータリーエンコーダ 累積カウンター",
  "BKY_ROTARY_COUNTER_TOOLTIP": "ロータリーエンコーダの回転量を累積し、カウンター値を返します。",
  "BKY_ROTARY_RESET_COUNTER": "🔄 ロータリーエンコーダ カウンターリセット",
  "BKY_ROTARY_RESET_COUNTER_TOOLTIP": "ロータリーエンコーダの累積カウンターを0にリセットします。",
  "BKY_THERMISTOR_SETUP": "🌡️ サーミスタ温度センサー: アナログピン %1 公称抵抗 %2Ω ベータ係数 %3 直列抵抗 %4Ω セットアップ",
  "BKY_THERMISTOR_SETUP_TOOLTIP": "サーミスタ温度センサーを設定します。",
  "BKY_THERMISTOR_READ_TEMPERATURE": "🌡️ サーミスタ温度センサー 温度測定 %1",
  "BKY_THERMISTOR_READ_TEMPERATURE_TOOLTIP": "サーミスタセンサーで温度を測定します。",
  "BKY_THERMISTOR_READ_RAW": "🌡️ サーミスタ温度センサー 生の値",
  "BKY_THERMISTOR_READ_RAW_TOOLTIP": "サーミスタセンサーの生の値を読み取ります。（0.1℃単位）",
  "BKY_THERMISTOR_GET_RESISTANCE": "🌡️ サーミスタ温度センサー 抵抗値",
  "BKY_THERMISTOR_GET_RESISTANCE_TOOLTIP": "サーミスタの現在の抵抗値を計算して返します。",
  "BKY_PMS_SETUP": "💨 微粒子センサー(PMS-X003): シリアルポート %1 RXピン %2 TXピン %3 ボーレート %4 セットアップ",
  "BKY_PMS_SETUP_TOOLTIP": "PMS微粒子センサーを設定します。（ハードウェアシリアル使用時はピン設定は無視されます）",
  "BKY_PMS_POWER_CONTROL": "💨 PMS微粒子センサー 電源 %1",
  "BKY_WAKE_UP": "ウェイクアップ",
  "BKY_SLEEP_MODE": "スリープモード",
  "BKY_PMS_POWER_CONTROL_TOOLTIP": "センサーの電源状態を制御します。",
  "BKY_PMS_SET_MODE": "💨 PMS微粒子センサー モード設定 %1",
  "BKY_ACTIVE_MODE": "アクティブモード",
  "BKY_PASSIVE_MODE": "パッシブモード",
  "BKY_PMS_SET_MODE_TOOLTIP": "センサーの動作モードを設定します。",
  "BKY_PMS_READ_DATA": "💨 PMS微粒子センサー %1 測定",
  "BKY_PM1_0_STANDARD": "PM1.0 (標準)",
  "BKY_PM2_5_STANDARD": "PM2.5 (標準)",
  "BKY_PM10_STANDARD": "PM10 (標準)",
  "BKY_PM1_0_ATMOSPHERIC": "PM1.0 (大気)",
  "BKY_PM2_5_ATMOSPHERIC": "PM2.5 (大気)",
  "BKY_PM10_ATMOSPHERIC": "PM10 (大気)",
  "BKY_PMS_READ_DATA_TOOLTIP": "微粒子濃度を測定します。(μg/m³)",
  "BKY_PMS_REQUEST_READ": "💨 PMS微粒子センサー 手動読み取り要求",
  "BKY_PMS_REQUEST_READ_TOOLTIP": "手動モードでデータ読み取りを要求します。",
  "BKY_PMS_DATA_AVAILABLE": "💨 PMS微粒子センサー データ準備完了",
  "BKY_PMS_DATA_AVAILABLE_TOOLTIP": "新しいデータが準備できているか確認します。",
  "BKY_MHZ19_SETUP": "⚠️MHZ19 CO2センサー セットアップ シリアル %1 RXピン %2 TXピン %3 通信速度 %4",
  "BKY_SERIAL_SOFT": "SoftwareSerial",
  "BKY_SERIAL_HARD": "Serial",
  "BKY_SERIAL_HARD1": "Serial1",
  "BKY_SERIAL_HARD2": "Serial2",
  "BKY_MHZ19_SETUP_TOOLTIP": "MHZ19 CO2センサーを初期化します。",
  "BKY_MHZ19_SET_RANGE": "⚠️MHZ19 測定範囲設定: %1 ppm",
  "BKY_MHZ19_SET_RANGE_TOOLTIP": "CO2測定範囲を設定します。（デフォルト: 2000ppm）",
  "BKY_MHZ19_FILTER": "⚠️MHZ19 フィルターモード %1 タイプ %2",
  "BKY_FILTER_ON": "ON",
  "BKY_FILTER_OFF": "OFF",
  "BKY_FILTER_CLEAR": "クリアモード",
  "BKY_FILTER_NORMAL": "通常モード",
  "BKY_MHZ19_FILTER_TOOLTIP": "センサーのフィルターモードを設定します。",
  "BKY_MHZ19_READ": "⚠️MHZ19 値を読み取る: %1",
  "BKY_MHZ19_CO2": "CO2(ppm)",
  "BKY_MHZ19_CO2_UNLIM": "CO2無制限(ppm)",
  "BKY_MHZ19_TEMP": "温度(℃)",
  "BKY_MHZ19_RAW": "生CO2",
  "BKY_MHZ19_TRANS": "透過率(%)",
  "BKY_MHZ19_ACCURACY": "精度",
  "BKY_MHZ19_READ_TOOLTIP": "MHZ19センサーから選択した値を読み取ります。",
  "BKY_MHZ19_CAL": "⚠️MHZ19 %1 周期(時間): %2",
  "BKY_CAL_AUTO_ON": "自動校正オン",
  "BKY_CAL_AUTO_OFF": "自動校正オフ",
  "BKY_CAL_ZERO": "ゼロ点校正を実行",
  "BKY_CAL_RESET": "リセット",
  "BKY_MHZ19_CAL_TOOLTIP": "MHZ19センサーの校正を実行します。",
  "BKY_MHZ19_STATUS": "⚠️MHZ19 ステータス読み取り: %1",
  "BKY_STATUS_RANGE": "測定範囲",
  "BKY_STATUS_ABC": "ABCステータス",
  "BKY_STATUS_BG_CO2": "背景CO2",
  "BKY_STATUS_VERSION": "バージョン情報",
  "BKY_MHZ19_STATUS_TOOLTIP": "MHZ19センサーからステータス情報を読み取ります。",
  "BKY_GRAVITY_TDS_SETUP": "🌊 TDSセンサー(GravityTDS) セットアップ ピン %1",
  "BKY_GRAVITY_TDS_SETUP_TOOLTIP": "DFRobot GravityTDSセンサーを初期化します。",
  "BKY_GRAVITY_TDS_TEMP": "🌊 TDSセンサー 温度補正設定: %1 ℃",
  "BKY_GRAVITY_TDS_TEMP_TOOLTIP": "測定精度を向上させるために温度補正値を設定します。",
  "BKY_GRAVITY_TDS_UPDATE": "🌊 TDSセンサー 値を更新",
  "BKY_GRAVITY_TDS_UPDATE_TOOLTIP": "センサーから新しい値を読み取り、計算を実行します。",
  "BKY_GRAVITY_TDS_READ": "🌊 TDSセンサー 値を読み取る: %1",
  "BKY_TDS_VALUE": "TDS値(ppm)",
  "BKY_EC_VALUE": "EC値(μS/cm)",
  "BKY_K_VALUE": "K値",
  "BKY_GRAVITY_TDS_READ_TOOLTIP": "TDS、EC、またはK値を読み取ります。",
  "BKY_GRAVITY_TDS_ADV": "🌊 TDSセンサー 詳細設定 %1 値: %2",
  "BKY_ADC_REF": "ADC基準電圧(V)",
  "BKY_ADC_RANGE": "ADC範囲",
  "BKY_K_ADDRESS": "K値保存アドレス",
  "BKY_GRAVITY_TDS_ADV_TOOLTIP": "センサーの詳細設定を変更します。",
  "BKY_DFROBOT_PH_SETUP": "🧪pHセンサーセットアップ ピン %1",
  "BKY_DFROBOT_PH_SETUP_TIP": "アナログピンでpHセンサーを初期化します。",
  "BKY_DFROBOT_PH_READ": "🧪温度 %1 °CでpH値を読み取る",
  "BKY_DFROBOT_PH_READ_TIP": "温度補正付きでpH値を読み取ります。",
  "BKY_DFROBOT_PH_VOLTAGE": "🧪pHセンサーの電圧を読み取る",
  "BKY_DFROBOT_PH_VOLTAGE_TIP": "pHセンサーから生の電圧を読み取ります。",
  "BKY_DFROBOT_PH_CALIBRATION": "🧪pH校正コマンド %1",
  "BKY_DFROBOT_PH_CALIBRATION_TIP": "pHセンサーに校正コマンドを送信します。",
  "BKY_DFROBOT_PH_ENTER": "校正に入る",
  "BKY_DFROBOT_PH_CALIBRATE": "校正する",
  "BKY_DFROBOT_PH_EXIT": "校正を終了する",
  "BKY_FINGERPRINT_SETUP": "👆指紋センサー セットアップ シリアル %1 RXピン %2 TXピン %3 通信速度 %4",
  "BKY_FINGERPRINT_SETUP_TOOLTIP": "Adafruit指紋センサーを初期化します。",
  "BKY_FINGERPRINT_ENROLL": "👆指紋登録プロセス %1 ID番号: %2",
  "BKY_GET_IMAGE": "画像を取得",
  "BKY_CONVERT_TEMPLATE": "テンプレートに変換",
  "BKY_CREATE_MODEL": "モデルを作成",
  "BKY_STORE_MODEL": "モデルを保存",
  "BKY_FINGERPRINT_ENROLL_TOOLTIP": "指紋登録プロセスを段階的に実行します。",
  "BKY_FINGERPRINT_SEARCH": "👆指紋認識モード: %1",
  "BKY_FAST_SEARCH": "高速検索",
  "BKY_NORMAL_SEARCH": "通常検索",
  "BKY_FINGERPRINT_SEARCH_TOOLTIP": "登録された指紋と照合を試みます。",
  "BKY_FINGERPRINT_RESULT": "👆指紋認識結果: %1",
  "BKY_FINGER_ID": "指ID",
  "BKY_CONFIDENCE": "信頼度",
  "BKY_TEMPLATE_COUNT": "登録数",
  "BKY_FINGERPRINT_RESULT_TOOLTIP": "指紋認識結果情報を取得します。",
  "BKY_FINGERPRINT_DATABASE": "👆指紋データベース %1 ID: %2",
  "BKY_DELETE_ID": "IDを削除",
  "BKY_EMPTY_ALL": "すべて空にする",
  "BKY_GET_COUNT": "数を取得",
  "BKY_FINGERPRINT_DATABASE_TOOLTIP": "指紋データベースを管理します。",
  "BKY_FINGERPRINT_LED": "👆指紋センサーLED制御 %1",
  "BKY_LED_ON": "ON",
  "BKY_LED_OFF": "OFF",
  "BKY_LED_BREATHING": "呼吸エフェクト",
  "BKY_LED_FLASHING": "点滅",
  "BKY_FINGERPRINT_LED_TOOLTIP": "指紋センサーのLEDを制御します。",
  "BKY_TURBIDITY_SETUP": "💧濁度センサー セットアップ アナログピン %1",
  "BKY_TURBIDITY_SETUP_TOOLTIP": "濁度センサーを初期化し、サンプリング配列を設定します。",
  "BKY_TURBIDITY_CALIBRATE": "💧濁度センサー ゼロ点調整 (清水)",
  "BKY_TURBIDITY_CALIBRATE_TOOLTIP": "清水中の基準電圧を測定してゼロ点を校正します。",
  "BKY_TURBIDITY_READ": "💧濁度センサー 値を読み取る: %1",
  "BKY_TURBIDITY_NTU": "濁度(NTU)",
  "BKY_TURBIDITY_VOLTAGE": "電圧(V)",
  "BKY_TURBIDITY_RAW": "生の値",
  "BKY_TURBIDITY_READ_TOOLTIP": "濁度センサーからNTU、電圧、または生の値を読み取ります。",
  "BKY_TURBIDITY_UPDATE": "💧濁度センサー 値を更新",
  "BKY_TURBIDITY_UPDATE_TOOLTIP": "センサー値をサンプリングし、配列を更新します。loop()内で呼び出してください。",
  "BKY_UV_SETUP": "😎UVセンサー セットアップ アナログピン %1",
  "BKY_UV_SETUP_TOOLTIP": "UVセンサーを初期化し、測定変数を設定します。",
  "BKY_UV_CALIBRATE": "😎UVセンサー 校正 %1 基準電圧: %2 mV",
  "BKY_CAL_INDOOR": "屋内 (ゼロ点調整)",
  "BKY_CAL_OUTDOOR": "屋外基準設定",
  "BKY_CAL_CUSTOM": "カスタム設定",
  "BKY_UV_CALIBRATE_TOOLTIP": "屋内/屋外の基準でUVセンサーを校正します。",
  "BKY_UV_READ": "😎UVセンサー 値を読み取る: %1",
  "BKY_UV_INDEX": "UVインデックス",
  "BKY_UV_VOLTAGE": "電圧(V)",
  "BKY_UV_VOLTAGE_MV": "電圧(mV)",
  "BKY_UV_RAW": "生の値",
  "BKY_UV_READ_TOOLTIP": "UVセンサーからUVインデックス、電圧、または生の値を読み取ります。",
  "BKY_DS1307_SETUP": "🕒DS1307 RTC %1 セットアップ",
  "BKY_DS1307_SETUP_TIP": "DS1307リアルタイムクロックモジュールを初期化します。",
  "BKY_DS1307_SET_TIME": "🕒RTC %1 時刻設定 年 %2 月 %3 日 %4 時 %5 分 %6 秒 %7",
  "BKY_DS1307_SET_TIME_TIP": "RTCモジュールに現在の日付と時刻を設定します。",
  "BKY_DS1307_GET_TIME": "🕒RTC %1 %2 を取得",
  "BKY_DS1307_GET_TIME_TIP": "RTCモジュールから特定の時刻の値を取得します。",
  "BKY_DS1307_CLOCK_CONTROL": "🕒RTC %1 クロック %2",
  "BKY_DS1307_CLOCK_CONTROL_TIP": "RTCクロックを開始または停止します。",
  "BKY_DS1307_SQW_OUTPUT": "🕒RTC %1 SQW出力 %2",
  "BKY_DS1307_SQW_OUTPUT_TIP": "SQWピンの出力タイプを設定します。",
  "BKY_DS1307_GET_TIME_STRING": "🕒RTC %1 時刻文字列取得 フォーマット %2",
  "BKY_DS1307_GET_TIME_STRING_TIP": "RTCからフォーマットされた時刻文字列を取得します。",
  "BKY_DS1307_TIME_YEAR": "年",
  "BKY_DS1307_TIME_MONTH": "月",
  "BKY_DS1307_TIME_DATE": "日",
  "BKY_DS1307_TIME_HOUR": "時",
  "BKY_DS1307_TIME_MINUTE": "分",
  "BKY_DS1307_TIME_SECOND": "秒",
  "BKY_DS1307_TIME_DAY_OF_WEEK": "曜日",
  "BKY_DS1307_CLOCK_START": "開始",
  "BKY_DS1307_CLOCK_STOP": "停止",
  "BKY_DS1307_OUTPUT_HIGH": "高",
  "BKY_DS1307_OUTPUT_LOW": "低",
  "BKY_DS1307_OUTPUT_1HZ": "1 Hz",
  "BKY_DS1307_OUTPUT_4KHZ": "4 kHz",
  "BKY_DS1307_OUTPUT_8KHZ": "8 kHz",
  "BKY_DS1307_OUTPUT_32KHZ": "32 kHz",
  "BKY_DS1307_FORMAT_DATETIME": "YYYY/MM/DD HH:MM:SS",
  "BKY_DS1307_FORMAT_DATE": "YYYY/MM/DD",
  "BKY_DS1307_FORMAT_TIME": "HH:MM:SS",
  "BKY_BMP280_SETUP": "⛰️気圧高度(BMP280)センサー セットアップ",
  "BKY_BMP280_SETUP_TOOLTIP": "DFRobot BMP280気圧温度センサーを初期化します。",
  "BKY_BMP280_SET_SEA_PRESSURE": "⛰️BMP280 海面気圧設定: %1 hPa (気象データ)",
  "BKY_BMP280_SET_SEA_PRESSURE_TOOLTIP": "正確な高度測定のために、気象サービスから提供される地域の海面気圧を設定します。",
  "BKY_BMP280_SET_REFERENCE": "⛰️BMP280 現在位置を %1 mの基準点として設定",
  "BKY_BMP280_SET_REFERENCE_TOOLTIP": "相対高度測定のために、現在位置を基準点として設定します。",
  "BKY_BMP280_READ": "⛰️BMP280 値 | 項目 %1",
  "BKY_BMP280_PRES_PA": "気圧(Pa)",
  "BKY_BMP280_PRES_HPA": "気圧(hPa)",
  "BKY_BMP280_ALT": "高度(m)",
  "BKY_BMP280_REL_ALT": "相対高度(m)",
  "BKY_BMP280_TEMP": "温度(℃)",
  "BKY_BMP280_READ_TOOLTIP": "BMP280センサーから温度、気圧、高度の値を読み取ります。",
  "BKY_MPU_SETUP": "🛰️ ジャイロセンサー(MPU6050)のセットアップ",
  "BKY_MPU_SETUP_TOOLTIP": "I2C (Wire) を介してMPU6050を初期化し、必要なライブラリをインクルードします。",
  "BKY_MPU_UPDATE": "🛰️ MPU6050の値の更新",
  "BKY_MPU_UPDATE_TIP": "センサー値を読み取って内部状態を更新します。loop()内で繰り返し呼び出してください。",
  "BKY_MPU_READ": "🛰️ MPU6050の値の読み取り: %1",
  "BKY_MPU_TEMP": "温度(℃)",
  "BKY_MPU_ANGLE_X": "角度X(°)",
  "BKY_MPU_ANGLE_Y": "角度Y(°)",
  "BKY_MPU_ANGLE_Z": "角度Z(°)",
  "BKY_MPU_ACC_X": "加速度X(g)",
  "BKY_MPU_ACC_Y": "加速度Y(g)",
  "BKY_MPU_ACC_Z": "加速度Z(g)",
  "BKY_MPU_GYRO_X": "ジャイロX(°/s)",
  "BKY_MPU_GYRO_Y": "ジャイロY(°/s)",
  "BKY_MPU_GYRO_Z": "ジャイロZ(°/s)",
  "BKY_MPU_READ_TIP": "update()後に選択した値を返します。",
  "BKY_MPU_SET_OFFSETS": "🛰️ ジャイロオフセットの設定 X:%1 Y:%2 Z:%3",
  "BKY_MPU_SET_OFFSETS_TIP": "ジャイロオフセット値を手動で設定します。",
  "BKY_MPU_CALC_OFFSETS": "🛰️ ジャイロオフセットの自動計算 安定化:%1ms 測定:%2ms",
  "BKY_MPU_CALC_OFFSETS_TIP": "ボードを平らに置いて実行します。ジャイロオフセットを自動的に計算します。",
  "BKY_SGP30_SETUP": "🌿 CO2センサー(SGP30) セットアップ I2C開始 + センサー初期化 | 初期eCO2ベース %1 | TVOCベース %2",
  "BKY_SGP30_SETUP_TOOLTIP": "Wire.begin(); sgp.begin(); (オプション) setIAQBaseline(eCO2_base, TVOC_base)",
  "BKY_SGP30_MEASURE": "🌿 SGP30 測定実行 (eCO2/TVOC更新)",
  "BKY_SGP30_MEASURE_TOOLTIP": "IAQmeasure()呼び出しでeCO2(ppm)、TVOC(ppb)を更新します",
  "BKY_SGP30_GET_ECO2": "🌿 eCO2 (ppm)",
  "BKY_SGP30_GET_ECO2_TOOLTIP": "最後に測定されたeCO2値 (ppm)",
  "BKY_SGP30_GET_TVOC": "🌿 TVOC (ppb)",
  "BKY_SGP30_GET_TVOC_TOOLTIP": "最後に測定されたTVOC値 (ppb)",
  "BKY_SGP30_SET_HUM": "🌿 湿度補正設定 (絶対湿度 mg/m³) %1",
  "BKY_SGP30_SET_HUM_TOOLTIP": "setHumidity(absolute_humidity)",
  "BKY_SGP30_SET_BASE": "🌿 ベースライン設定 eCO2 %1 | TVOC %2",
  "BKY_SGP30_SET_BASE_TOOLTIP": "setIAQBaseline(eCO2_base, TVOC_base)",
  "BKY_SGP30_EE_SAVE_FIXED": "🌿 SGP30 ベースライン保存 (EEPROM固定アドレス)",
  "BKY_SGP30_EE_SAVE_FIXED_TIP": "eCO2→アドレス0、TVOC→アドレス2に保存します。",
  "BKY_SGP30_EE_LOAD_FIXED": "🌿 SGP30 ベースライン読み込み (EEPROM固定アドレス)",
  "BKY_SGP30_EE_LOAD_FIXED_TIP": "アドレス0/2から読み込み、setIAQBaselineを適用します",
  "BKY_SGP30_EE_SAVE": "🌿 SGP30 ベースライン保存 | eCO2アドレス %1 | TVOCアドレス %2",
  "BKY_SGP30_EE_SAVE_TIP": "getIAQBaseline()を読み込み、指定されたアドレスに保存します",
  "BKY_SGP30_EE_LOAD": "🌿 SGP30 ベースライン読み込み | eCO2アドレス %1 | TVOCアドレス %2",
  "BKY_SGP30_EE_LOAD_TIP": "EEPROMから読み込み、setIAQBaselineを適用します",
  "BKY_VL53_SETUP": "📏 レーザー距離センサー(VL53L0X) セットアップ I2Cアドレス %1",
  "BKY_VL53_SETUP_TIP": "Wire.begin(); vl53.begin(address); (例: 0x29)",
  "BKY_VL53_SET_MODE": "📏 VL53L0X モード設定 | 測定モード %1 | 精度 %2",
  "BKY_VL53_MODE_SINGLE": "単発測定(eSingle)",
  "BKY_VL53_MODE_CONT": "連続測定(eContinuous)",
  "BKY_VL53_PREC_HIGH": "高精度(eHigh)",
  "BKY_VL53_PREC_LOW": "低精度(eLow)",
  "BKY_VL53_SET_MODE_TIP": "setMode(mode, precision)呼び出し",
  "BKY_VL53_CTRL": "📏 VL53L0X 制御 %1",
  "BKY_VL53_START": "測定開始",
  "BKY_VL53_STOP": "測定停止",
  "BKY_VL53_CTRL_TIP": "start()/stop()",
  "BKY_VL53_READ": "📏 VL53L0X 読み取り %1",
  "BKY_VL53_VAL_DIST": "距離(mm)",
  "BKY_VL53_VAL_AMBIENT": "環境光(ambient)",
  "BKY_VL53_VAL_SIGNAL": "信号強度(signal)",
  "BKY_VL53_VAL_STATUS": "ステータスコード(status)",
  "BKY_VL53_READ_TIP": "getDistance()/getAmbientCount()/getSignalCount()/getStatus()",
  "BKY_SHT31_SETUP": "🌡️ 温湿度(SHT31)センサー セットアップ | I2Cアドレス %1",
  "BKY_SHT31_SETUP_TIP": "SHT31温湿度センサーを初期化します",
  "BKY_SHT31_READ": "🌡️ SHT31センサー 読み取り %1",
  "BKY_SHT31_FAST": "高速読み取り",
  "BKY_SHT31_SLOW": "正確な読み取り",
  "BKY_SHT31_READ_TIP": "SHT31センサーから温湿度データを読み取ります",
  "BKY_SHT31_CONNECTED": "🌡️ SHT31センサー 接続済み",
  "BKY_SHT31_CONNECTED_TIP": "SHT31センサーが接続されているか確認します",
  "BKY_SHT31_GET_DATA": "🌡️ SHT31 %1",
  "BKY_SHT31_TEMP_C": "温度 (°C)",
  "BKY_SHT31_TEMP_F": "温度 (°F)",
  "BKY_SHT31_HUMIDITY": "湿度 (%)",
  "BKY_SHT31_GET_DATA_TIP": "SHT31センサーから選択したデータを取得します",
  "BKY_SHT31_HEATER": "🌡️ SHT31 ヒーター %1",
  "BKY_SHT31_HEAT_ON": "ON",
  "BKY_SHT31_HEAT_OFF": "OFF",
  "BKY_SHT31_HEATER_TIP": "SHT31センサーのヒーターを制御します",
  "BKY_SHT31_HEAT_STATUS": "🌡️ SHT31 ヒーター作動中",
  "BKY_SHT31_HEAT_STATUS_TIP": "SHT31センサーのヒーターが作動しているか確認します",
  "BKY_SHT31_RESET": "🌡️ SHT31 リセット %1",
  "BKY_SHT31_SOFT": "ソフトリセット",
  "BKY_SHT31_HARD": "ハードリセット",
  "BKY_SHT31_RESET_TIP": "SHT31センサーをリセットします",
  "BKY_SHT31_ERROR": "🌡️ SHT31 エラーコード",
  "BKY_SHT31_ERROR_TIP": "SHT31センサーの最後のエラーコードを取得します",
  "BKY_COLOR_SENSOR_SETUP": "🎨 カラーセンサー(TCS34725) セットアップ",
  "BKY_COLOR_SENSOR_SETUP_TIP": "カラーセンサーを設定し、通信を初期化します",
  "BKY_COLOR_SENSOR_INIT": "🎨 カラーセンサー 初期化",
  "BKY_COLOR_SENSOR_INIT_TIP": "カラーセンサーを初期化し、色検出を有効にします",
  "BKY_COLOR_SENSOR_TRIGGER": "🎨 カラーセンサー 色検出 %1",
  "BKY_COLOR_SENSOR_RAW": "生の色",
  "BKY_COLOR_SENSOR_ADJUST": "調整済みの色",
  "BKY_COLOR_SENSOR_TRIGGER_TIP": "色を検出し、RGB/HSVデータを計算します",
  "BKY_COLOR_SENSOR_GET_DATA": "🎨 カラーセンサー %1",
  "BKY_COLOR_SENSOR_RED": "赤 (0～255)",
  "BKY_COLOR_SENSOR_GREEN": "緑 (0～255)",
  "BKY_COLOR_SENSOR_BLUE": "青 (0～255)",
  "BKY_COLOR_SENSOR_HUE": "色相 (0～360)",
  "BKY_COLOR_SENSOR_SATURATION": "彩度 (0～1)",
  "BKY_COLOR_SENSOR_VALUE": "明度 (0～1)",
  "BKY_COLOR_SENSOR_GET_DATA_TIP": "カラーセンサーから選択した色データを取得します",
  "BKY_COLOR_SENSOR_IS_COLOR": "🎨 カラーセンサーの色は %1 ですか？",
  "BKY_COLOR_SENSOR_COLOR_RED": "赤",
  "BKY_COLOR_SENSOR_COLOR_GREEN": "緑",
  "BKY_COLOR_SENSOR_COLOR_BLUE": "青",
  "BKY_COLOR_SENSOR_COLOR_YELLOW": "黄色",
  "BKY_COLOR_SENSOR_COLOR_CYAN": "シアン",
  "BKY_COLOR_SENSOR_COLOR_MAGENTA": "マゼンタ",
  "BKY_COLOR_SENSOR_IS_COLOR_TIP": "検出された色が選択した色と一致するか確認します",
  "BKY_MLX90614_SETUP": "🌡MLX90614温度センサー設定 I2Cアドレス %1",
  "BKY_MLX90614_SETUP_TIP": "I2Cアドレスを使用してMLX90614非接触温度センサーを初期化します。",
  "BKY_MLX90614_READ_TEMP": "🌡%1の温度を%2で読み取る",
  "BKY_MLX90614_READ_TEMP_TIP": "物体または周囲の温度を摂氏または華氏で読み取ります。",
  "BKY_MLX90614_OBJECT": "物体",
  "BKY_MLX90614_AMBIENT": "周囲",
  "BKY_MLX90614_CELSIUS": "摂氏(°C)",
  "BKY_MLX90614_FAHRENHEIT": "華氏(°F)",
  "BKY_APDS9960_SETUP": "👋 ジェスチャーセンサー(APDS9960) セットアップ",
  "BKY_APDS9960_SETUP_TIP": "APDS9960ジェスチャー/近接/光センサーを初期化します",
  "BKY_APDS9960_SENSOR_CONTROL": "👋 APDS9960 %1 センサー %2 割り込み %3",
  "BKY_APDS9960_LIGHT": "光",
  "BKY_APDS9960_PROXIMITY": "近接",
  "BKY_APDS9960_GESTURE": "ジェスチャー",
  "BKY_APDS9960_ENABLE": "有効化",
  "BKY_APDS9960_DISABLE": "無効化",
  "BKY_APDS9960_INT_ON": "使用",
  "BKY_APDS9960_INT_OFF": "不使用",
  "BKY_APDS9960_SENSOR_CONTROL_TIP": "APDS9960の特定のセンサーを制御します",
  "BKY_APDS9960_READ_LIGHT": "👋 APDS9960 %1 光",
  "BKY_APDS9960_AMBIENT": "環境光",
  "BKY_APDS9960_RED": "赤",
  "BKY_APDS9960_GREEN": "緑",
  "BKY_APDS9960_BLUE": "青",
  "BKY_APDS9960_READ_LIGHT_TIP": "APDS9960から選択した光データを読み取ります",
  "BKY_APDS9960_READ_PROXIMITY": "👋 APDS9960 近接センサー値",
  "BKY_APDS9960_READ_PROXIMITY_TIP": "APDS9960近接センサー値(0-255)を読み取ります",
  "BKY_APDS9960_GESTURE_AVAILABLE": "👋 APDS9960 ジェスチャー検出",
  "BKY_APDS9960_GESTURE_AVAILABLE_TIP": "読み取り可能なジェスチャーがあるか確認します",
  "BKY_APDS9960_GESTURE_CONTROL": "👋 APDS9960 ジェスチャー %1 %2",
  "BKY_APDS9960_READ_ANY": "読み取り",
  "BKY_APDS9960_CHECK_SPECIFIC": "確認",
  "BKY_APDS9960_GESTURE_LEFT": "左",
  "BKY_APDS9960_GESTURE_RIGHT": "右",
  "BKY_APDS9960_GESTURE_UP": "上",
  "BKY_APDS9960_GESTURE_DOWN": "下",
  "BKY_APDS9960_GESTURE_NEAR": "近く",
  "BKY_APDS9960_GESTURE_FAR": "遠く",
  "BKY_APDS9960_GESTURE_CONTROL_TIP": "ジェスチャーを読み取るか、特定のジェスチャーを確認します",
  "BKY_MAX30105_SETUP_BASIC": "❤️心拍センサーのセットアップ",
  "BKY_MAX30105_SETUP_BASIC_TIP": "心拍数と血中酸素濃度を測定するためのセンサーをセットアップします",
  "BKY_MAX30105_GET_HEARTRATE": "❤️心拍数を取得（BPM）",
  "BKY_MAX30105_GET_HEARTRATE_TIP": "1分あたりの心拍数を取得します",
  "BKY_MAX30105_GET_SPO2": "❤️血中酸素濃度を取得（%）",
  "BKY_MAX30105_GET_SPO2_TIP": "血中酸素飽和度のパーセンテージを取得します",
  "BKY_MAX30105_FINGER_DETECTED": "❤️指が検出されました",
  "BKY_MAX30105_FINGER_DETECTED_TIP": "センサーに指が置かれているか確認します",
  "BKY_MAX30105_BEAT_DETECTED": "❤️心拍が検出されました",
  "BKY_MAX30105_BEAT_DETECTED_TIP": "新しい心拍が検出されるとtrueを返します",
  "BKY_MAX30105_SENSOR_READY": "❤️センサー準備完了",
  "BKY_MAX30105_SENSOR_READY_TIP": "センサーが測定に十分なデータを持っているか確認します",
  "BKY_MAX30105_GET_TEMP": "❤️センサー温度を取得（°C）",
  "BKY_MAX30105_GET_TEMP_TIP": "センサーの温度を摂氏で取得します",
  "BKY_MAX30105_SETUP_ADVANCED": "❤️センサーのセットアップ（詳細）%1用、電力%2",
  "BKY_MAX30105_SETUP_ADVANCED_TIP": "上級ユーザー向けの高度なセンサー設定",
  "BKY_MAX30105_GET_RED_RAW": "❤️赤色LEDの生の値を取得",
  "BKY_MAX30105_GET_RED_RAW_TIP": "赤色LEDセンサーの生の値を取得します（詳細）",
  "BKY_MAX30105_GET_IR_RAW": "❤️赤外線LEDの生の値を取得",
  "BKY_MAX30105_GET_IR_RAW_TIP": "赤外線LEDセンサーの生の値を取得します（詳細）",
  "BKY_MAX30105_MODE_HEARTRATE": "心拍数",
  "BKY_MAX30105_MODE_OXYGEN": "血中酸素",
  "BKY_MAX30105_MODE_PROXIMITY": "指検出",
  "BKY_MAX30105_POWER_LOW": "低",
  "BKY_MAX30105_POWER_MEDIUM": "中",
  "BKY_MAX30105_POWER_HIGH": "高",
  "BKY_SI7021_SETUP": "🌡️Si7021温湿度センサーのセットアップ",
  "BKY_SI7021_SETUP_TOOLTIP": "I2CでAdafruit Si7021温湿度センサーを初期化します。",
  "BKY_SI7021_READ": "🌡️Si7021の値の読み取り: %1",
  "BKY_SI7021_TEMP": "温度(℃)",
  "BKY_SI7021_HUMIDITY": "湿度(%)",
  "BKY_SI7021_READ_TOOLTIP": "Si7021センサーから温度または湿度の値を読み取ります。",
  "BKY_SI7021_RESET": "🌡️Si7021センサーのリセット",
  "BKY_SI7021_RESET_TOOLTIP": "Si7021センサーをリセットします。",
  "BKY_SI7021_SERIAL": "🌡️Si7021シリアル番号の読み取り: %1",
  "BKY_SERIAL_A": "シリアルA",
  "BKY_SERIAL_B": "シリアルB",
  "BKY_SI7021_SERIAL_TOOLTIP": "Si7021センサーのシリアル番号を読み取ります。",
  "BKY_DCMOTOR_SETUP": "⚙️ DCモーター(L9110) %1: Aピン %2 Bピン %3 セットアップ",
  "BKY_DCMOTOR_SETUP_TOOLTIP": "特定のピンにDCモーターを設定します。このブロックはDCmotor.hライブラリをインクルードします。",
  "BKY_DCMOTOR_RUN": "⚙️ DCモーター %1: 速度 %2, 方向 %3 実行",
  "BKY_DCMOTOR_CLOCKWISE": "時計回り",
  "BKY_DCMOTOR_COUNTERCLOCKWISE": "反時計回り",
  "BKY_DCMOTOR_RUN_TOOLTIP": "指定された速度(0～255)と方向でDCモーターを回転させます。",
  "BKY_DCMOTOR_STOP": "⚙️ DCモーター %1: 停止",
  "BKY_DCMOTOR_STOP_TOOLTIP": "DCモーターを停止します。",
  "BKY_ACCELSTEPPER_SETUP": "🔄 ステッピングモーター(A4988) ドライバー(%1) %2: DIRピン %3, Stepピン %4 セットアップ",
  "BKY_ACCELSTEPPER_DRIVER": "ドライバー(2ピン)",
  "BKY_ACCELSTEPPER_FULL2WIRE": "2線式フルステップ",
  "BKY_ACCELSTEPPER_FULL4WIRE": "4線式フルステップ",
  "BKY_ACCELSTEPPER_HALF4WIRE": "4線式ハーフステップ",
  "BKY_ACCELSTEPPER_SETUP_TIP": "ステッピングモーターを初期化し、ドライバータイプとピンを設定します",
  "BKY_ACCELSTEPPER_SETTINGS": "🔄 ステッピングモーター %1: 最大速度 %2, 加速度係数 %3, 速度設定 %4, ステップ設定 %5",
  "BKY_ACCELSTEPPER_SETTINGS_TIP": "ステッピングモーターの速度、加速度、ステップ設定を行います",
  "BKY_ACCELSTEPPER_MOVE": "🔄 ステッピングモーター %1: %2 %3",
  "BKY_ACCELSTEPPER_MOVE_TO": "絶対位置に移動",
  "BKY_ACCELSTEPPER_MOVE_REL": "相対位置に移動",
  "BKY_ACCELSTEPPER_SET_POS": "現在位置を設定",
  "BKY_ACCELSTEPPER_MOVE_TIP": "ステッピングモーターの位置を設定または移動します",
  "BKY_ACCELSTEPPER_CONTROL": "🔄 ステッピングモーター %1: %2",
  "BKY_ACCELSTEPPER_RUN": "実行",
  "BKY_ACCELSTEPPER_RUN_SPEED": "速度で実行",
  "BKY_ACCELSTEPPER_RUN_TO_POS": "位置まで実行",
  "BKY_ACCELSTEPPER_STOP": "停止",
  "BKY_ACCELSTEPPER_ENABLE": "出力有効",
  "BKY_ACCELSTEPPER_DISABLE": "出力無効",
  "BKY_ACCELSTEPPER_CONTROL_TIP": "ステッピングモーターを制御します",
  "BKY_ACCELSTEPPER_STATUS": "🔄 ステッピングモーター %1: %2",
  "BKY_ACCELSTEPPER_CURRENT_POS": "現在位置",
  "BKY_ACCELSTEPPER_TARGET_POS": "目標位置",
  "BKY_ACCELSTEPPER_DISTANCE": "残り距離",
  "BKY_ACCELSTEPPER_IS_RUNNING": "実行中",
  "BKY_ACCELSTEPPER_SPEED": "現在速度",
  "BKY_ACCELSTEPPER_STATUS_TIP": "ステッピングモーターの状態を確認します",
  "BKY_STEPPERMULTI_SETUP": "⚡ ステッピングモーター(%1 & %2) %3",
  "BKY_STEPPERMULTI_28BYJ": "28BYJ-48",
  "BKY_STEPPERMULTI_ULN2003": "ULN2003",
  "BKY_STEPPERMULTI_CUSTOM": "カスタム",
  "BKY_STEPPERMULTI_4PIN": "4ピン接続",
  "BKY_STEPPERMULTI_2PIN": "2ピン接続",
  "BKY_STEPPERMULTI_SETUP_PINS": "ピン: IN1 %1 IN2 %2 IN3 %3 IN4 %4",
  "BKY_STEPPERMULTI_SETUP_TIP": "StepperMultiモーターを設定します (28BYJ-48は2048ステップ/回転)",
  "BKY_STEPPERMULTI_SPEED": "⚡ ステッピングモーター: No. %1 回転速度 %2 RPM",
  "BKY_STEPPERMULTI_SPEED_TIP": "ステッピングモーターの回転速度をRPMで設定します",
  "BKY_STEPPERMULTI_MOVE": "⚡ ステッピングモーター %1: %2 %3 に設定",
  "BKY_STEPPERMULTI_STEP": "ステップ",
  "BKY_STEPPERMULTI_ANGLE": "角度",
  "BKY_STEPPERMULTI_MOVE_TIP": "ステッピングモーターを指定されたステップ数または角度だけ移動するように設定します",
  "BKY_STEPPERMULTI_RUN": "⚡ ステッピングモーター %1: 移動",
  "BKY_STEPPERMULTI_RUN_TIP": "実際にステッピングモーターを移動させます (ループ内で継続的に呼び出す必要があります)",
  "BKY_PWMSERVO_SETUP": "🦾PWMサーボドライバ(pca9685) %1 セットアップ I2Cアドレス %2 PWM周波数 %3 Hz",
  "BKY_PWMSERVO_SETUP_TIP": "I2C接続で16チャンネルPWMサーボドライバをセットアップします。",
  "BKY_PWMSERVO_SERVO_ANGLE": "🦾サーボドライバ %1 チャンネル %2 角度を %3 度に設定",
  "BKY_PWMSERVO_SERVO_ANGLE_TIP": "サーボモーターの角度を制御します (0-180度)。",
  "BKY_PWMSERVO_SERVO_MICROSECONDS": "🦾サーボドライバ %1 チャンネル %2 パルスを %3 マイクロ秒に設定",
  "BKY_PWMSERVO_SERVO_MICROSECONDS_TIP": "正確なパルス幅でサーボモーターを制御します (500-2500マイクロ秒)。",
  "BKY_PWMSERVO_PWM_OUTPUT": "🦾サーボドライバ %1 チャンネル %2 PWM値 %3 (0-4095)",
  "BKY_PWMSERVO_PWM_OUTPUT_TIP": "LEDやモーター制御のためのPWM出力値を設定します (0-4095)。",
  "BKY_PWMSERVO_PWM_ADVANCED": "🦾サーボドライバ %1 チャンネル %2 PWM オン %3 オフ %4",
  "BKY_PWMSERVO_PWM_ADVANCED_TIP": "オン/オフタイミングによる高度なPWM制御 (0-4095)。",
  "BKY_PWMSERVO_POWER": "🦾サーボドライバ %1 %2",
  "BKY_PWMSERVO_POWER_WAKEUP": "ウェイクアップ",
  "BKY_PWMSERVO_POWER_SLEEP": "スリープ",
  "BKY_PWMSERVO_POWER_RESET": "リセット",
  "BKY_PWMSERVO_POWER_TIP": "サーボドライバの電源管理を制御します。",
  "BKY_PWMSERVO_MULTI_SERVO": "🦾サーボドライバ %1 複数のサーボを設定 Ch1 %2° Ch2 %3° Ch3 %4° Ch4 %5°",
  "BKY_PWMSERVO_MULTI_SERVO_TIP": "複数のサーボモーターを同時に制御します。",
  "BKY_PWMSERVO_LED_BRIGHTNESS": "🦾サーボドライバ %1 チャンネル %2 LEDの明るさ %3 %",
  "BKY_PWMSERVO_LED_BRIGHTNESS_TIP": "PWMを使用してLEDの明るさを制御します (0-100%)。",
  "BKY_BUZZER_TONE_SETUP": "🎵 ブザーのセットアップ",
  "BKY_BUZZER_TONE_SETUP_TOOLTIP": "ブザーライブラリを初期化し、演奏に必要な関数を準備します。setup()内に一度だけ配置してください。",
  "BKY_BUZZER_PLAY_NOTE": "🎵 ブザー: デジタルピン %1 で %2 の音を %3 拍再生",
  "BKY_NOTE_C4": "ド(C4)",
  "BKY_NOTE_CS4": "ド#(C#4)",
  "BKY_NOTE_D4": "レ(D4)",
  "BKY_NOTE_DS4": "レ#(D#4)",
  "BKY_NOTE_E4": "ミ(E4)",
  "BKY_NOTE_F4": "ファ(F4)",
  "BKY_NOTE_FS4": "ファ#(F#4)",
  "BKY_NOTE_G4": "ソ(G4)",
  "BKY_NOTE_GS4": "ソ#(G#4)",
  "BKY_NOTE_A4": "ラ(A4)",
  "BKY_NOTE_AS4": "ラ#(A#4)",
  "BKY_NOTE_B4": "シ(B4)",
  "BKY_NOTE_C5": "高いド(C5)",
  "BKY_NOTE_REST": "(休符)",
  "BKY_BEAT_WHOLE": "全音符 (4)",
  "BKY_BEAT_DOTTED_HALF": "付点2分音符 (3)",
  "BKY_BEAT_HALF": "2分音符 (2)",
  "BKY_BEAT_DOTTED_QUARTER": "付点4分音符 (1.5)",
  "BKY_BEAT_QUARTER": "4分音符 (1)",
  "BKY_BEAT_EIGHTH": "8分音符 (0.5)",
  "BKY_BEAT_SIXTEENTH": "16分音符 (0.25)",
  "BKY_BUZZER_PLAY_NOTE_TOOLTIP": "接続されたブザーで音階と拍子に従って音を再生します。",
  "BKY_BUZZER_SET_TEMPO": "🎵 再生速度(BPM)を %1 に設定",
  "BKY_BUZZER_SET_TEMPO_TOOLTIP": "再生速度を1分あたりの拍数(BPM)で設定します。デフォルトは120です。",
  "BKY_BUZZER_STOP": "🎵 ブザー: デジタルピン %1 の音を停止",
  "BKY_BUZZER_STOP_TOOLTIP": "ブザーの音を直ちに停止します。",
  "BKY_MP3_SETUP": "🎧 MP3(KT403A) セットアップ デバイス %1 RX %2 TX %3 初期音量(0～30) %4",
  "BKY_MP3_DEV_SD": "SDカード(0x02)",
  "BKY_MP3_DEV_UDISK": "Uディスク(0x01)",
  "BKY_MP3_SETUP_TIP": "SoftwareSerial mp3の作成、デバイス選択、音量初期化",
  "BKY_MP3_PLAY_INDEX": "🎧 MP3トラック番号 %1 を再生",
  "BKY_MP3_PLAY_INDEX_TIP": "SpecifyMusicPlay(インデックス)",
  "BKY_MP3_PLAY_FOLDER": "🎧 MP3フォルダ/ファイル再生 フォルダ %1 ファイル %2",
  "BKY_MP3_PLAY_FOLDER_TIP": "SpecifyfolderPlay(フォルダ, ファイル)",
  "BKY_MP3_SET_VOLUME": "🎧 MP3音量設定(0～30) %1",
  "BKY_MP3_SET_VOLUME_TIP": "SetVolume(音量)",
  "BKY_MP3_CONTROL": "🎧 MP3コントロール %1",
  "BKY_MP3_NEXT": "次のトラック",
  "BKY_MP3_PREV": "前のトラック",
  "BKY_MP3_PAUSE": "一時停止",
  "BKY_MP3_RESUME": "再開",
  "BKY_MP3_LOOP_ALL": "すべてループ",
  "BKY_MP3_VOL_UP": "音量↑",
  "BKY_MP3_VOL_DOWN": "音量↓",
  "BKY_MP3_PRINT_RET": "リターンデータ出力",
  "BKY_MP3_CONTROL_TIP": "PlayNext/Previous, PlayPause/Resume, PlayLoop, Increase/DecreaseVolume, printReturnedData",
  "BKY_MP3_QUERY_STATUS": "🎧 MP3ステータス値 (0=再生完了)",
  "BKY_MP3_QUERY_STATUS_TIP": "QueryPlayStatus(): 0は再生完了を意味します",
  "BKY_SD_SETUP": "💾SDカードNo %1 セットアップ CS %2 MOSI %3 MISO %4 SCK %5",
  "BKY_SD_SETUP_TIP": "指定されたSPIピンでSDカードを初期化します。",
  "BKY_SD_OPEN_FILE": "💾ファイル %1 を開く ファイル名 %2 モード %3",
  "BKY_SD_OPEN_FILE_TIP": "読み書き用にファイルを開きます。",
  "BKY_SD_WRITE_FILE": "💾ファイル %1 に書き込む データ %2",
  "BKY_SD_WRITE_FILE_TIP": "開いたファイルにデータを書き込みます。",
  "BKY_SD_READ_FILE": "💾ファイル %1 から読み込む",
  "BKY_SD_READ_FILE_TIP": "開いたファイルからデータを読み込みます。",
  "BKY_SD_FILE_EXISTS": "💾ファイル %1 が存在するか ファイル名 %2",
  "BKY_SD_FILE_EXISTS_TIP": "SDカードにファイルが存在するか確認します。",
  "BKY_SD_FILE_SIZE": "💾ファイルサイズ %1",
  "BKY_SD_FILE_SIZE_TIP": "開いたファイルのサイズをバイト単位で取得します。",
  "BKY_SD_CLOSE_FILE": "💾ファイル %1 を閉じる",
  "BKY_SD_CLOSE_FILE_TIP": "開いたファイルを閉じます。",
  "BKY_SD_REMOVE_FILE": "💾ファイル %1 を削除 ファイル名 %2",
  "BKY_SD_REMOVE_FILE_TIP": "SDカードからファイルを削除します。",
  "BKY_SD_MAKE_DIRECTORY": "💾ディレクトリ %1 を作成 パス %2",
  "BKY_SD_MAKE_DIRECTORY_TIP": "SDカードにディレクトリを作成します。",
  "BKY_SD_FILE_AVAILABLE": "💾利用可能なバイト数 %1",
  "BKY_SD_FILE_AVAILABLE_TIP": "読み取り可能なバイト数を取得します。",
  "BKY_SD_MODE_READ": "読み取り",
  "BKY_SD_MODE_WRITE": "書き込み",
  "BKY_IR_SETUP": "📱 IRリモート受信機セットアップ ピン %1",
  "BKY_IR_SETUP_TIP": "IRリモート受信機を設定します",
  "BKY_IR_AVAILABLE": "📱 IRリモート信号が利用可能ですか？",
  "BKY_IR_AVAILABLE_TIP": "IRリモート信号が受信されたか確認します",
  "BKY_IR_READ_BUTTON": "📱 IRリモートボタン番号",
  "BKY_IR_READ_BUTTON_TIP": "押されたIRリモートボタンの番号を返します (0-9, 10:CH-, 11:CH, 12:CH+, 20-22:再生ボタン, 30-32:音量ボタン)",
  "BKY_IR_READ_RAW": "📱 IRリモート生コード値",
  "BKY_IR_READ_RAW_TIP": "IRリモートの生コード値を返します (上級者向け)",
  "BKY_IR_BUTTON_IS": "📱 IRリモートボタンは %1 ですか？",
  "BKY_IR_BTN_0": "0",
  "BKY_IR_BTN_1": "1",
  "BKY_IR_BTN_2": "2",
  "BKY_IR_BTN_3": "3",
  "BKY_IR_BTN_4": "4",
  "BKY_IR_BTN_5": "5",
  "BKY_IR_BTN_6": "6",
  "BKY_IR_BTN_7": "7",
  "BKY_IR_BTN_8": "8",
  "BKY_IR_BTN_9": "9",
  "BKY_IR_BTN_CH_DOWN": "CH-",
  "BKY_IR_BTN_CH": "CH",
  "BKY_IR_BTN_CH_UP": "CH+",
  "BKY_IR_BTN_PREV": "前へ",
  "BKY_IR_BTN_NEXT": "次へ",
  "BKY_IR_BTN_PLAY": "再生",
  "BKY_IR_BTN_VOL_DOWN": "音量-",
  "BKY_IR_BTN_VOL_UP": "音量+",
  "BKY_IR_BUTTON_IS_TIP": "特定のボタンがIRリモートで押されたか確認します",
  "BKY_RF433_SETUP": "📡 RF433MHz無線通信 送受信",
  "BKY_RF433_SETUP_TIP": "RF433MHz無線通信ライブラリを初期化します",
  "BKY_RF433_CONFIG": "📡 RF433MHz送信ピン %1, %2 データ送信",
  "BKY_RF433_CONFIG_TIP": "RF433MHz送信ピンを設定し、メッセージを送信します",
  "BKY_RF433_RX_SETUP": "📡 RF433MHz受信ピン %1 送信速度 %2 セットアップ",
  "BKY_RF433_RX_SETUP_TIP": "RF433MHz受信ピンと送信速度を設定します",
  "BKY_RF433_RX_START": "📡 RF433MHz 1.受信データをバッファに保存する準備",
  "BKY_RF433_RX_START_TIP": "データ受信準備のためにRF433MHz受信機を開始します",
  "BKY_RF433_HAVE_MESSAGE": "📡 RF433MHz 2.受信データが利用可能か？",
  "BKY_RF433_HAVE_MESSAGE_TIP": "受信メッセージが利用可能か確認します",
  "BKY_RF433_GET_MESSAGE": "📡 RF433MHz 3.受信データをバッファに保存",
  "BKY_RF433_GET_MESSAGE_TIP": "受信メッセージをバッファに保存します",
  "BKY_RF433_READ_DATA": "📡 RF433MHz: 受信データを読み取る",
  "BKY_RF433_READ_DATA_TIP": "バッファに保存された受信データを読み取ります",
  "BKY_GPS_SETUP_TGPS": "📶 GPSセットアップ シリアル %1 ボーレート %2",
  "BKY_GPS_SETUP_TGPS2": "↳ (SoftwareSerial選択時) RXピン %1 TXピン %2",
  "BKY_GPS_SETUP_TGPS_TIP": "TinyGPS++の初期化と選択されたシリアルの開始",
  "BKY_GPS_UPDATE": "📶 GPS更新 (シリアル受信 → パーサー)",
  "BKY_GPS_UPDATE_TIP": "受信したNMEA文字をgps.encode()に渡します",
  "BKY_GPS_READ": "📶 GPS読み取り値 %1",
  "BKY_GPS_LAT": "緯度",
  "BKY_GPS_LNG": "経度",
  "BKY_GPS_SPEED": "速度(km/h)",
  "BKY_GPS_ALT": "高度(m)",
  "BKY_GPS_COURSE": "方角(度)",
  "BKY_GPS_SATS": "衛星数",
  "BKY_GPS_HDOP": "HDOP",
  "BKY_GPS_YEAR": "年",
  "BKY_GPS_MONTH": "月",
  "BKY_GPS_DAY": "日",
  "BKY_GPS_HOUR": "時",
  "BKY_GPS_MIN": "分",
  "BKY_GPS_SEC": "秒",
  "BKY_GPS_READ_TIP": "TinyGPS++メンバーから必要な値を返します",
  "BKY_GPS_HAS_FIX": "📶 GPS測位完了(FIX)？",
  "BKY_GPS_HAS_FIX_TIP": "gps.location.isValid() → 1/0",
  "BKY_GPS_BETWEEN": "📶 2座標計算 | 計算タイプ %1 | 緯度1 %2 経度1 %3 緯度2 %4 経度2 %5",
  "BKY_GPS_DIST_M": "距離(m)",
  "BKY_GPS_COURSE_DEG": "方位(度)",
  "BKY_GPS_BETWEEN_TIP": "distanceBetween()/courseTo()の計算",
  "BKY_GPS_CARDINAL": "📶 方位(16方位) | 角度 %1",
  "BKY_GPS_CARDINAL_TIP": "cardinal(度) → N, NE, E ...",
  "BKY_UTIL_SERIAL_BEGIN": "1. シリアル通信設定 (速度: %1)",
  "BKY_UTIL_SERIAL_BEGIN_TOOLTIP": "ハードウェアシリアル通信を開始します。",
  "BKY_UTIL_SERIAL_AVAILABLE_CHECK": "2. シリアル通信が利用可能な場合",
  "BKY_UTIL_SERIAL_AVAILABLE_CHECK_TOOLTIP": "シリアルポート経由で受信したデータが利用可能か確認します。",
  "BKY_UTIL_SERIAL_READ": "3. %1 読み取り",
  "BKY_SERIAL_READ_BYTE": "バイト",
  "BKY_SERIAL_READ_STRING": "文字列",
  "BKY_SERIAL_READ_STRING_UNTIL": "改行まで読み取り",
  "BKY_UTIL_SERIAL_READ_TOOLTIP": "シリアルポートからデータを読み取ります。バイト: 1バイト、文字列: 全文字列、改行まで: \\nまで読み取り",
  "BKY_UTIL_SERIAL_PRINT": "4. Serial. %1 %2 値出力",
  "BKY_SERIAL_PRINTLN": "println",
  "BKY_SERIAL_PRINT": "print",
  "BKY_UTIL_SERIAL_PRINT_TOOLTIP": "シリアルモニターにデータを出力します。",
  "BKY_UTIL_BT_SETUP": "1. Bluetooth: Tx %1, Rx %2 速度 %3 セットアップ",
  "BKY_UTIL_BT_SETUP_TOOLTIP": "ソフトウェアシリアルを使用してBluetooth通信を設定します。",
  "BKY_UTIL_BT_AVAILABLE": "2. Bluetooth: 受信データが利用可能な場合",
  "BKY_UTIL_BT_AVAILABLE_TOOLTIP": "Bluetooth経由で受信したデータが利用可能か確認します。",
  "BKY_UTIL_BT_READ": "3. %1 読み取り",
  "BKY_UTIL_BT_READ_TOOLTIP": "Bluetoothからデータを読み取ります。バイト: 1バイト、文字列: 全文字列、改行まで: \\nまで読み取り",
  "BKY_UTIL_BT_READ_BUFFER": "3. バイト読み取り (バッファ、長さ %1)",
  "BKY_UTIL_BT_READ_BUFFER_TOOLTIP": "指定された長さのデータをバッファから読み取ります。",
  "BKY_UTIL_BT_PRINT": "4. Bluetooth: %1 %2 データ出力",
  "BKY_UTIL_BT_PRINT_TOOLTIP": "Bluetooth経由でデータを送信します。",
  "BKY_UTIL_MILLIS": "millis() 呼び出し",
  "BKY_UTIL_MILLIS_TOOLTIP": "プログラム開始からの経過時間をミリ秒単位で返します。",
  "BKY_UTIL_MAP": "∞ 変数 %1 を %2, %3 から %4, %5 にマッピング",
  "BKY_UTIL_MAP_TOOLTIP": "ある範囲の数値を別の範囲に比例的に変換します。",
  "BKY_UTIL_CONSTRAIN": "∞ 変数 %1 を %2 と %3 の間に制約",
  "BKY_UTIL_CONSTRAIN_TOOLTIP": "数値の範囲を制約します。",
  "BKY_UTIL_CONVERT": "∞ %1 を %2 に変換",
  "BKY_INT": "整数",
  "BKY_FLOAT": "浮動小数点",
  "BKY_STRING": "文字列",
  "BKY_UTIL_CONVERT_TOOLTIP": "値を異なるデータ型に変換します。",
  "BKY_UTIL_TO_CHAR": "∞ ASCII %1 を文字に",
  "BKY_UTIL_TO_CHAR_TOOLTIP": "ASCII番号コードに対応する文字を返します。",
  "BKY_UTIL_TO_ASCII": "∞ %1 をASCIIコードに",
  "BKY_UTIL_TO_ASCII_TOOLTIP": "文字に対応するASCII番号コードを返します。",
  "BKY_UTIL_I2C_SCANNER": "I2Cアドレススキャナ",
  "BKY_UTIL_I2C_SCANNER_TOOLTIP": "接続されているI2Cデバイスのアドレスをシリアルモニターにスキャンします。",
  "BKY_UTIL_I2C_READ_ADDRESS": "I2Cアドレス",
  "BKY_UTIL_I2C_READ_ADDRESS_TOOLTIP": "I2Cスキャン結果のアドレスを文字列として取得します。",
  "BKY_SERIAL_PARSE_DATA": "受信データを %1 区切り文字で解析",
  "BKY_SERIAL_PARSE_DATA_TOOLTIP": "特定の区切り文字で受信文字列を切り取り、解析します。",
  "BKY_SERIAL_GET_PARSED_VALUE": "%1 番目の解析済み値",
  "BKY_SERIAL_GET_PARSED_VALUE_TOOLTIP": "インデックスで解析済みのデータ片を取得します。",
  "BKY_SERIAL_GET_PARSED_COUNT": "解析済み値の数",
  "BKY_SERIAL_GET_PARSED_COUNT_TOOLTIP": "解析済みのデータ片の総数を返します。",
  "BKY_SERIAL_CONVERT_TO_NUMBER": "%1 を数値に変換",
  "BKY_SERIAL_CONVERT_TO_NUMBER_TOOLTIP": "文字列を数値(float)に変換します。",
  "BKY_SERIAL_GET_RAW_DATA": "受信生データ",
  "BKY_SERIAL_GET_RAW_DATA_TOOLTIP": "受信した生の文字列全体を返します。",
  "BKY_SERIAL_CLEAR_BUFFER": "保存データをクリア",
  "BKY_SERIAL_CLEAR_BUFFER_TOOLTIP": "内部受信バッファをクリアします。",
  "BKY_DEVELOPER_INFO_BLOCK": "👨‍💻 開発者: Kim Seok-jeon | 連絡先: alphaco@kakao.com_右クリック",
  "BKY_DEVELOPER_INFO_BLOCK_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、開発者のウェブサイトにアクセスできます。",
  "BKY_CUSTOM_AD_BLOCK": "🚀 MCU(Arduino, Ma:bit, ESP32, Pico) 使用ガイド、BRIXEL紹介_右クリック",
  "BKY_CUSTOM_AD_BLOCK_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、ウェブサイトにアクセスできます。",
  "BKY_GO_TO_AI_ROBOT_SCRATCH": "🤖 AI*ROBOT Scratchへ移動_右クリック",
  "BKY_GO_TO_AI_ROBOT_SCRATCH_TOOLTIP": "ブロックを右クリックして「ヘルプ」を選択すると、AI*ROBOT ScratchでAIを使ってハードウェアを制御できます。",
  "BKY_GO_TO_K12_PROJECTHUB": "🤖 K12_ProjectHubへ移動_右クリック",
  "BKY_GO_TO_K12_PROJECTHUB_TOOLTIP": "ブロックを右クリックして「ヘルプ」を選択すると、k12-projecthubでさまざまな例を探せます。",
  "BKY_MAIN_FLAG": "基本的なArduinoコーディング構造を提供します。",
  "BKY_MAIN_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_PIN_FLAG": "Arduinoのすべてのピン関連制御が利用可能です。",
  "BKY_PIN_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_CONTROL_FLAG": "Arduinoの条件分岐とループ構造を提供します。",
  "BKY_CONTROL_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_LOGIC_FLAG": "論理式を提供します。",
  "BKY_LOGIC_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_MATH_FLAG": "数学記号と関数を提供します。",
  "BKY_MATH_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_TEXT_FLAG": "文字列処理を提供します。",
  "BKY_TEXT_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_COLOUR_FLAG": "色の選択と組み合わせを提供します。",
  "BKY_COLOUR_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_VAR_FLAG": "数値変数と文字列変数の作成を許可します。",
  "BKY_VAR_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_FUNC_FLAG": "ユーザー定義関数の作成を許可します。",
  "BKY_FUNC_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_DIS01_FLAG": "ディスプレイ出力デバイスの制御ブロックを提供します。",
  "BKY_DIS01_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_DIS02_FLAG": "高度なディスプレイ出力デバイスの制御ブロックを提供します。",
  "BKY_DIS02_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_SENSOR01_FLAG": "一般センサーの制御ブロックを提供します。",
  "BKY_SENSOR01_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_SENSOR02_FLAG": "高度なI2Cセンサーの制御ブロックを提供します。",
  "BKY_SENSOR02_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_MOTOR_FLAG": "モーター制御ブロックを提供します。",
  "BKY_MOTOR_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_OUTPUT_FLAG": "出力デバイスの制御ブロックを提供します。",
  "BKY_OUTPUT_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_COMM_FLAG": "通信デバイスの制御ブロックを提供します。",
  "BKY_COMM_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  "BKY_UTIL_FLAG": "コーディングに役立つさまざまな制御ブロックを提供します。",
  "BKY_UTIL_FLAG_TOOLTIP": "このブロックを右クリックして「ヘルプ」を選択すると、使用ガイドが表示されます。",
  
  "sectionTitleConnection": "🔗 PCエージェント接続",
  "connectionStatusConnected": "✅ PCエージェントに接続されています",
  "connectionStatusDisconnected": "❌ PCエージェントに接続されていません",
  "portDisabledMessage": "* PCエージェントに接続後に利用可能",
  "BKY_CATEGORY_LIST": "🗂️ リスト",
  "BKY_ARRAY_CREATE": "📚 配列 %1 を作成 タイプ %2 値 %3",
  "BKY_ARRAY_CREATE_TIP": "初期値を持つ配列を作成します",
  "BKY_ARRAY_CREATE_EMPTY": "📚 空の配列 %1 を作成 タイプ %2 サイズ %3",
  "BKY_ARRAY_CREATE_EMPTY_TIP": "指定したサイズの空の配列を作成します",
  "BKY_ARRAY_GET": "📚 配列 %1 のインデックス %2 を取得",
  "BKY_ARRAY_GET_TIP": "指定したインデックスの配列の値を取得します",
  "BKY_ARRAY_SET": "📚 配列 %1 のインデックス %2 に %3 を設定",
  "BKY_ARRAY_SET_TIP": "指定したインデックスに配列の値を設定します",
  "BKY_ARRAY_APPEND": "📚 %1 を配列 %2 に追加",
  "BKY_ARRAY_APPEND_TIP": "値を配列の末尾に追加します",
  "BKY_ARRAY_REMOVE": "📚 配列 %1 のインデックス %2 を削除",
  "BKY_ARRAY_REMOVE_TIP": "指定したインデックスの値を削除し、要素をシフトします",
  "BKY_ARRAY_FIND": "📚 配列 %2 で %1 を検索",
  "BKY_ARRAY_FIND_TIP": "配列内の値を検索し、インデックスを返します（見つからない場合は -1）",
  "BKY_ARRAY_LENGTH": "📚 配列 %1 の長さ",
  "BKY_ARRAY_LENGTH_TIP": "配列の合計サイズを取得します",
  "BKY_ARRAY_CLEAR": "📚 配列 %1 を %2 で埋める",
  "BKY_ARRAY_CLEAR_TIP": "指定した値で配列全体を埋めます",
  "BKY_ARRAY_COPY": "📚 配列を %1 から %2 へコピー",
  "BKY_ARRAY_COPY_TIP": "ソース配列のすべての値をターゲット配列にコピーします",
  "BKY_ARRAY_STRLEN": "📚 文字列 %1 の長さ",
  "BKY_ARRAY_STRLEN_TIP": "文字配列（文字列）の実際の長さを取得します",
  "BKY_ARRAY_CONTAINS": "📚 配列 %1 に %2 が含まれる",
  "BKY_ARRAY_CONTAINS_TIP": "配列に値が存在するかを確認します",
  "BKY_ARRAY_TYPE_INT": "整数",
  "BKY_ARRAY_TYPE_FLOAT": "小数",
  "BKY_ARRAY_TYPE_CHAR": "文字",

  "BKY_OLED_HAN_SETUP": "🖥️OLED(SSD1306) 韓国語ディスプレイ X0~12, Y0~6 をセットアップ",
  "BKY_OLED_HAN_SETUP_TIP": "韓国語テキスト対応のOLEDディスプレイを初期化します。最初に使用する必要があります。",
  "BKY_OLED_HAN_CLEAR": "🖥️OLEDディスプレイをクリア",
  "BKY_OLED_HAN_CLEAR_TIP": "OLEDディスプレイ上のすべての内容を消去します。",
  "BKY_OLED_HAN_PRINT_TEXT": "🖥️テキスト %1 を X %2 Y %3 %4 に表示",
  "BKY_OLED_HAN_PRINT_TEXT_TIP": "指定位置に任意のテキスト（韓国語、英語、数字、混合）を表示します。",
  "BKY_OLED_HAN_BIG_DIGIT": "🖥️大きな数字 %1 を X %2 Y %3 %4 に表示",
  "BKY_OLED_HAN_BIG_DIGIT_TIP": "7セグメントスタイルの大きな数字（0–9）を表示します。",
  "BKY_OLED_HAN_DRAW_BAR": "🖥️バーグラフを X %1 Y %2 値 %3 に描画",
  "BKY_OLED_HAN_DRAW_BAR_TIP": "値（0–128）で水平バーグラフを描画します。",
  "BKY_OLED_HAN_MODE_NORMAL": "通常",
  "BKY_OLED_HAN_MODE_INVERSE": "反転",

  "BKY_SH1106_SETUP": "🖥️OLED(SH1106) 韓国語ディスプレイ X0~12, Y0~6 をセットアップ",
  "BKY_SH1106_SETUP_TIP": "韓国語テキスト出力用にSH1106 OLEDディスプレイを初期化します",
  "BKY_SH1106_CLEAR": "🖥️OLEDディスプレイをクリア",
  "BKY_SH1106_CLEAR_TIP": "OLEDディスプレイ上のすべての内容を消去します",
  "BKY_SH1106_PRINT_TEXT": "🖥️テキスト %1 を X %2 Y %3 スタイル %4 に表示",
  "BKY_SH1106_PRINT_TEXT_TIP": "指定位置に韓国語または英語のテキストを表示します",
  "BKY_SH1106_LARGE_NUMBER": "🖥️大きな数字 %1 を X %2 Y %3 スタイル %4 に表示",
  "BKY_SH1106_LARGE_NUMBER_TIP": "大きなビットマップ数字（0–9）またはコロン（:）を表示します",
  "BKY_SH1106_DRAW_BAR": "🖥️バーグラフを X %1 Y %2 値 %3 に描画",
  "BKY_SH1106_DRAW_BAR_TIP": "指定した値（0–128）で水平バーグラフを描画します",
  "BKY_SH1106_STYLE_NORMAL": "通常",
  "BKY_SH1106_STYLE_INVERSE": "反転",

  "BKY_CONTROLS_IF_ELSEIF_TITLE_ELSEIF": "ELSE IF を追加",
  "BKY_CONTROLS_IF_IF_TITLE_IF": "既存の IF 文",
  "BKY_CONTROLS_IF_ELSE_TITLE_ELSE": "ELSE を追加",

  "_comment": "PCエージェント通信およびリアルタイムログメッセージ - 日本語翻訳",
  "agent_compile_start": "コードのコンパイルを開始しています。",
  "agent_compile_mode": "現在のモード: {modeName}",
  "agent_compile_no_code": "コンパイルするコードがありません。",
  "agent_compile_no_connection": "❌ PCエージェントに接続できません。エージェントが実行中か確認してください。",
  "agent_compile_success": "✅ コンパイル完了！ サイズ: {size}",
  "agent_compile_fail": "❌ コンパイル失敗: {errorMsg}",
  "agent_compile_request_fail": "❌ コンパイル要求が失敗しました: {errorMsg}",
  "agent_upload_need_compile": "アップロードする前にコンパイルしてください。",
  "agent_upload_request_sent": "📤 アップロード要求を送信しました。",
  "agent_upload_fail": "❌ アップロード失敗: {errorMsg}",
  "agent_upload_no_connection": "PCエージェントに接続できません。",
  "agent_upload_request_fail": "❌ アップロード要求が失敗しました: {errorMsg}",
  "agent_port_request": "🔍 ポートリストを要求中...",
  "agent_port_not_available": "⚠️ ポートリストを取得できません。",
  "agent_port_request_fail": "ポートリストの要求に失敗しました。",
  "agent_port_list_updated": "ポートリストを更新しました ({portCount} 個のポート)",
  "websocket_connected": "🌐 PCエージェントに接続されました。",
  "websocket_disconnected": "🔌 PCエージェントから切断されました。",
  "websocket_error": "❌ PCエージェント接続エラーが発生しました。",
  "websocket_unavailable": "⚠️ リアルタイム通信が利用できません。",
  "compile_progress": "🔄 コンパイルの進行状況: {message}",
  "upload_progress": "📤 アップロードの進行状況: {message}",
  "agent_error": "❌ エラー: {message}",
  "agent_connected": "🔗 PCエージェントに接続されました。",
  "agent_not_found": "⚠️ PCエージェントが見つかりません。インストールして実行してください。",
  "agent_connection_required": "❌ PCエージェントに接続できません。まずエージェントを起動してください。",
  "system_ready": "✅ 静的Web版Arduino IDEの初期化が完了しました",
  "system_init_fail": "⚠️ システム初期化に失敗しました。",
  "mode_switch_block": "ブロックコーディングモードに切り替えました。",
  "mode_switch_text": "テキストコーディングモードに切り替えました。",
  "file_save_block": "{fileName} ブロックファイルを保存しました。",
  "file_save_sketch": "{fileName} スケッチファイルを保存しました。",
  "file_save_fail_block": "ブロックファイルの保存に失敗しました。",
  "file_save_fail_sketch": "スケッチファイルの保存に失敗しました。",
  "file_load_block": "{fileName} ブロックファイルを読み込みました。",
  "file_load_sketch": "{fileName} スケッチファイルを読み込みました。",
  "file_load_fail": "ファイルの読み込みに失敗しました: {errorMsg}",
  "code_copy_no_content": "コピーするコードがありません。",
  "code_copy_success": "コードをクリップボードにコピーしました。",
  "code_copy_fail": "クリップボードへのコピーに失敗しました。",
  "project_export_success": "プロジェクトをエクスポートしました: {fileName}",
  "project_export_fail": "プロジェクトのエクスポートに失敗しました。",
  "project_import_invalid": "有効なプロジェクトファイル (.json) を選択してください。",
  "project_import_success": "プロジェクトをインポートしました: {projectName}",
  "project_import_fail": "プロジェクトのインポートに失敗しました: {errorMsg}",
  "language_change_success": "言語が {lang} に変更されました。",
  "language_change_fail": "言語の変更に失敗しました: {errorMsg}",
  "agent_status_connected": "✅ PCエージェントに接続されています",
  "agent_status_disconnected": "⏳ PCエージェントに接続されていません",
  "mode_block": "ブロックコーディング",
  "mode_text": "テキストコーディング",
  "mode_switch_message": "{modeName} モードに切り替えました。",
  "loading_system_init": "システムを初期化中...",
  "connection_status_connected": "✅ PCエージェントに接続されています",
  "connection_status_disconnected": "⏳ PCエージェントに接続されていません",
  "i18n_init_start": "i18n 初期化を開始",
  "i18n_basic_complete": "基本 i18n 初期化が完了しました",
  "i18n_blockly_load_complete": "Blockly 公式翻訳ファイルを読み込みました",
  "i18n_blockly_load_fail": "Blockly 公式翻訳の読み込みに失敗、デフォルトを使用します",
  "i18n_blockly_setlocale_complete": "Blockly.setLocale が正常に適用されました",
  "i18n_custom_inject_complete": "カスタム翻訳メッセージを注入しました",
  "i18n_init_fail": "翻訳システムの初期化に失敗しました",
  "language_json_load_fail": "{newLanguage}.json の読み込みに失敗しました",
  "monaco_ltr_reset_complete": "MonacoエディタのLTR方向リセットが完了しました"
}